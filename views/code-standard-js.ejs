<!DOCTYPE html>
<html>
<head>
    <!-- layout -->
    <%-include("common/layout_header")%>

    <link rel='stylesheet' href='/app/common/css/github.css' />
    <link rel='stylesheet' href='/app/common/css/frameworks.css' />
    <link rel='stylesheet' href='<%= link %>' />
</head>
<body>
<!-- 公共头部 -->
<%-include("common/header")%>

<div class="wrapper">
    <article class="markdown-body entry-content" itemprop="text"><h1><a href="#javascript编码规范" aria-hidden="true" class="anchor" id="user-content-javascript编码规范"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JavaScript编码规范</h1>
        <p><a href="#user-content-1-%E5%89%8D%E8%A8%80">1 前言</a></p>
        <p><a href="#user-content-2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a></p>
        <p>　　<a href="#user-content-21-%E6%96%87%E4%BB%B6">2.1 文件</a></p>
        <p>　　<a href="#user-content-22-%E7%BB%93%E6%9E%84">2.2 结构</a></p>
        <p>　　　　<a href="#user-content-221-%E7%BC%A9%E8%BF%9B">2.2.1 缩进</a></p>
        <p>　　　　<a href="#user-content-222-%E7%A9%BA%E6%A0%BC">2.2.2 空格</a></p>
        <p>　　　　<a href="#user-content-223-%E6%8D%A2%E8%A1%8C">2.2.3 换行</a></p>
        <p>　　　　<a href="#user-content-224-%E8%AF%AD%E5%8F%A5">2.2.4 语句</a></p>
        <p>　　<a href="#user-content-23-%E5%91%BD%E5%90%8D">2.3 命名</a></p>
        <p>　　<a href="#user-content-24-%E6%B3%A8%E9%87%8A">2.4 注释</a></p>
        <p>　　　　<a href="#user-content-241-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.1 单行注释</a></p>
        <p>　　　　<a href="#user-content-242-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.2 多行注释</a></p>
        <p>　　　　<a href="#user-content-243-%E6%96%87%E6%A1%A3%E5%8C%96%E6%B3%A8%E9%87%8A">2.4.3 文档化注释</a></p>
        <p>　　　　<a href="#user-content-244-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">2.4.4 类型定义</a></p>
        <p>　　　　<a href="#user-content-245-%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.5 文件注释</a></p>
        <p>　　　　<a href="#user-content-246-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E9%87%8A">2.4.6 命名空间注释</a></p>
        <p>　　　　<a href="#user-content-247-%E7%B1%BB%E6%B3%A8%E9%87%8A">2.4.7 类注释</a></p>
        <p>　　　　<a href="#user-content-248-%E5%87%BD%E6%95%B0/%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A">2.4.8 函数/方法注释</a></p>
        <p>　　　　<a href="#user-content-249-%E4%BA%8B%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.9 事件注释</a></p>
        <p>　　　　<a href="#user-content-2410-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A">2.4.10 常量注释</a></p>
        <p>　　　　<a href="#user-content-2411-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A">2.4.11 复杂类型注释</a></p>
        <p>　　　　<a href="#user-content-2412-amd-%E6%A8%A1%E5%9D%97%E6%B3%A8%E9%87%8A">2.4.12 AMD 模块注释</a></p>
        <p>　　　　<a href="#user-content-2413-%E7%BB%86%E8%8A%82%E6%B3%A8%E9%87%8A">2.4.13 细节注释</a></p>
        <p><a href="#user-content-3-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">3 语言特性</a></p>
        <p>　　<a href="#user-content-31-%E5%8F%98%E9%87%8F">3.1 变量</a></p>
        <p>　　<a href="#user-content-32-%E6%9D%A1%E4%BB%B6">3.2 条件</a></p>
        <p>　　<a href="#user-content-33-%E5%BE%AA%E7%8E%AF">3.3 循环</a></p>
        <p>　　<a href="#user-content-34-%E7%B1%BB%E5%9E%8B">3.4 类型</a></p>
        <p>　　　　<a href="#user-content-341-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B">3.4.1 类型检测</a></p>
        <p>　　　　<a href="#user-content-342-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">3.4.2 类型转换</a></p>
        <p>　　<a href="#user-content-35-%E5%AD%97%E7%AC%A6%E4%B8%B2">3.5 字符串</a></p>
        <p>　　<a href="#user-content-36-%E5%AF%B9%E8%B1%A1">3.6 对象</a></p>
        <p>　　<a href="#user-content-37-%E6%95%B0%E7%BB%84">3.7 数组</a></p>
        <p>　　<a href="#user-content-38-%E5%87%BD%E6%95%B0">3.8 函数</a></p>
        <p>　　　　<a href="#user-content-381-%E5%87%BD%E6%95%B0%E9%95%BF%E5%BA%A6">3.8.1 函数长度</a></p>
        <p>　　　　<a href="#user-content-382-%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1">3.8.2 参数设计</a></p>
        <p>　　　　<a href="#user-content-383-%E9%97%AD%E5%8C%85">3.8.3 闭包</a></p>
        <p>　　　　<a href="#user-content-384-%E7%A9%BA%E5%87%BD%E6%95%B0">3.8.4 空函数</a></p>
        <p>　　<a href="#user-content-39-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">3.9 面向对象</a></p>
        <p>　　<a href="#user-content-310-%E5%8A%A8%E6%80%81%E7%89%B9%E6%80%A7">3.10 动态特性</a></p>
        <p>　　　　<a href="#user-content-3101-eval">3.10.1 eval</a></p>
        <p>　　　　<a href="#user-content-3102-%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">3.10.2 动态执行代码</a></p>
        <p>　　　　<a href="#user-content-3103-with">3.10.3 with</a></p>
        <p>　　　　<a href="#user-content-3104-delete">3.10.4 delete</a></p>
        <p>　　　　<a href="#user-content-3105-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">3.10.5 对象属性</a></p>
        <p><a href="#user-content-4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83">4 浏览器环境</a></p>
        <p>　　<a href="#user-content-41-%E6%A8%A1%E5%9D%97%E5%8C%96">4.1 模块化</a></p>
        <p>　　　　<a href="#user-content-411-amd">4.1.1 AMD</a></p>
        <p>　　　　<a href="#user-content-412-define">4.1.2 define</a></p>
        <p>　　　　<a href="#user-content-413-require">4.1.3 require</a></p>
        <p>　　<a href="#user-content-42-dom">4.2 DOM</a></p>
        <p>　　　　<a href="#user-content-421-%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96">4.2.1 元素获取</a></p>
        <p>　　　　<a href="#user-content-422-%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96">4.2.2 样式获取</a></p>
        <p>　　　　<a href="#user-content-423-%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">4.2.3 样式设置</a></p>
        <p>　　　　<a href="#user-content-424-dom-%E6%93%8D%E4%BD%9C">4.2.4 DOM 操作</a></p>
        <p>　　　　<a href="#user-content-425-dom-%E4%BA%8B%E4%BB%B6">4.2.5 DOM 事件</a></p>
        <h2><a href="#1-前言" aria-hidden="true" class="anchor" id="user-content-1-前言"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1 前言</h2>
        <p>JavaScript 在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。</p>
        <p>虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p>
        <h2><a href="#2-代码风格" aria-hidden="true" class="anchor" id="user-content-2-代码风格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2 代码风格</h2>
        <h3><a href="#21-文件" aria-hidden="true" class="anchor" id="user-content-21-文件"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.1 文件</h3>
        <h5><a href="#建议-javascript-文件使用无-bom-的-utf-8-编码" aria-hidden="true" class="anchor" id="user-content-建议-javascript-文件使用无-bom-的-utf-8-编码"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] JavaScript 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5>
        <p>解释：</p>
        <p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
        <h5><a href="#建议-在文件结尾处保留一个空行" aria-hidden="true" class="anchor" id="user-content-建议-在文件结尾处保留一个空行"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 在文件结尾处，保留一个空行。</h5>
        <h3><a href="#22-结构" aria-hidden="true" class="anchor" id="user-content-22-结构"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.2 结构</h3>
        <h4><a href="#221-缩进" aria-hidden="true" class="anchor" id="user-content-221-缩进"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.2.1 缩进</h4>
        <h5><a href="#强制-使用-4-个空格做为一个缩进层级不允许使用-2-个空格-或-tab-字符" aria-hidden="true" class="anchor" id="user-content-强制-使用-4-个空格做为一个缩进层级不允许使用-2-个空格-或-tab-字符"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5>
        <h5><a href="#强制-switch-下的-case-和-default-必须增加一个缩进层级" aria-hidden="true" class="anchor" id="user-content-强制-switch-下的-case-和-default-必须增加一个缩进层级"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">switch</span> (variable) {

    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>1<span class="pl-pds">'</span></span>:
        <span class="pl-c"><span class="pl-c">//</span> do...</span>
        <span class="pl-k">break</span>;

    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>2<span class="pl-pds">'</span></span>:
        <span class="pl-c"><span class="pl-c">//</span> do...</span>
        <span class="pl-k">break</span>;

    <span class="pl-k">default</span>:
        <span class="pl-c"><span class="pl-c">//</span> do...</span>

}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">switch</span> (variable) {

<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>1<span class="pl-pds">'</span></span>:
    <span class="pl-c"><span class="pl-c">//</span> do...</span>
    <span class="pl-k">break</span>;

<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>2<span class="pl-pds">'</span></span>:
    <span class="pl-c"><span class="pl-c">//</span> do...</span>
    <span class="pl-k">break</span>;

<span class="pl-k">default</span>:
    <span class="pl-c"><span class="pl-c">//</span> do...</span>

}</pre></div>
        <h4><a href="#222-空格" aria-hidden="true" class="anchor" id="user-content-222-空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.2.2 空格</h4>
        <h5><a href="#强制-二元运算符两侧必须有一个空格一元运算符与操作对象之间不允许有空格" aria-hidden="true" class="anchor" id="user-content-强制-二元运算符两侧必须有一个空格一元运算符与操作对象之间不允许有空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-smi">arr</span>.<span class="pl-c1">length</span>;
a<span class="pl-k">++</span>;
a <span class="pl-k">=</span> b <span class="pl-k">+</span> c;</pre></div>
        <h5><a href="#强制-用作代码块起始的左花括号--前必须有一个空格" aria-hidden="true" class="anchor" id="user-content-强制-用作代码块起始的左花括号--前必须有一个空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (condition) {
}

<span class="pl-k">while</span> (condition) {
}

<span class="pl-k">function</span> <span class="pl-en">funcName</span>() {
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (condition){
}

<span class="pl-k">while</span> (condition){
}

<span class="pl-k">function</span> <span class="pl-en">funcName</span>(){
}</pre></div>
        <h5><a href="#强制-if--else--for--while--function--switch--do--try--catch--finally-关键字后必须有一个空格" aria-hidden="true" class="anchor" id="user-content-强制-if--else--for--while--function--switch--do--try--catch--finally-关键字后必须有一个空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (condition) {
}

<span class="pl-k">while</span> (condition) {
}

(<span class="pl-k">function</span> () {
})();

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span>(condition) {
}

<span class="pl-k">while</span>(condition) {
}

(<span class="pl-k">function</span>() {
})();</pre></div>
        <h5><a href="#强制-在对象创建时属性中的--之后必须有空格-之前不允许有空格" aria-hidden="true" class="anchor" id="user-content-强制-在对象创建时属性中的--之后必须有空格-之前不允许有空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
    a<span class="pl-k">:</span> <span class="pl-c1">1</span>,
    b<span class="pl-k">:</span> <span class="pl-c1">2</span>,
    c<span class="pl-k">:</span> <span class="pl-c1">3</span>
};

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
    a <span class="pl-k">:</span> <span class="pl-c1">1</span>,
    b<span class="pl-k">:</span><span class="pl-c1">2</span>,
    c <span class="pl-k">:</span><span class="pl-c1">3</span>
};</pre></div>
        <h5><a href="#强制-函数声明具名函数表达式函数调用中函数名和--之间不允许有空格" aria-hidden="true" class="anchor" id="user-content-强制-函数声明具名函数表达式函数调用中函数名和--之间不允许有空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">function</span> <span class="pl-en">funcName</span>() {
}

<span class="pl-k">var</span> <span class="pl-en">funcName</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">funcName</span>() {
};

<span class="pl-en">funcName</span>();

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">function</span> <span class="pl-en">funcName</span> () {
}

<span class="pl-k">var</span> <span class="pl-en">funcName</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">funcName</span> () {
};

<span class="pl-en">funcName</span> ();</pre></div>
        <h5><a href="#强制--和--前不允许有空格如果不位于行尾-和--后必须跟一个空格" aria-hidden="true" class="anchor" id="user-content-强制--和--前不允许有空格如果不位于行尾-和--后必须跟一个空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。如果不位于行尾，<code>,</code> 和 <code>;</code> 后必须跟一个空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-en">callFunc</span>(a, b);

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-en">callFunc</span>(a , b) ;</pre></div>
        <h5><a href="#强制-在函数调用函数声明括号表达式属性访问if--for--while--switch--catch-等语句中-和--内紧贴括号部分不允许有空格" aria-hidden="true" class="anchor" id="user-content-强制-在函数调用函数声明括号表达式属性访问if--for--while--switch--catch-等语句中-和--内紧贴括号部分不允许有空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>

<span class="pl-en">callFunc</span>(param1, param2, param3);

<span class="pl-en">save</span>(<span class="pl-c1">this</span>.<span class="pl-smi">list</span>[<span class="pl-c1">this</span>.<span class="pl-smi">indexes</span>[i]]);

needIncream <span class="pl-k">&amp;&amp;</span> (variable <span class="pl-k">+=</span> increament);

<span class="pl-k">if</span> (num <span class="pl-k">&gt;</span> <span class="pl-smi">list</span>.<span class="pl-c1">length</span>) {
}

<span class="pl-k">while</span> (len<span class="pl-k">--</span>) {
}


<span class="pl-c"><span class="pl-c">//</span> bad</span>

<span class="pl-en">callFunc</span>( param1, param2, param3 );

<span class="pl-en">save</span>( <span class="pl-c1">this</span>.<span class="pl-smi">list</span>[ <span class="pl-c1">this</span>.<span class="pl-smi">indexes</span>[ i ] ] );

needIncreament <span class="pl-k">&amp;&amp;</span> ( variable <span class="pl-k">+=</span> increament );

<span class="pl-k">if</span> ( num <span class="pl-k">&gt;</span> <span class="pl-smi">list</span>.<span class="pl-c1">length</span> ) {
}

<span class="pl-k">while</span> ( len<span class="pl-k">--</span> ) {
}</pre></div>
        <h5><a href="#强制-单行声明的数组与对象如果包含元素-和--内紧贴括号部分不允许包含空格" aria-hidden="true" class="anchor" id="user-content-强制-单行声明的数组与对象如果包含元素-和--内紧贴括号部分不允许包含空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5>
        <p>解释：</p>
        <p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> arr1 <span class="pl-k">=</span> [];
<span class="pl-k">var</span> arr2 <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>];
<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {};
<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> {name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>obj<span class="pl-pds">'</span></span>};
<span class="pl-k">var</span> obj3 <span class="pl-k">=</span> {
    name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>obj<span class="pl-pds">'</span></span>,
    age<span class="pl-k">:</span> <span class="pl-c1">20</span>,
    sex<span class="pl-k">:</span> <span class="pl-c1">1</span>
};

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> arr1 <span class="pl-k">=</span> [ ];
<span class="pl-k">var</span> arr2 <span class="pl-k">=</span> [ <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span> ];
<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> { };
<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>obj<span class="pl-pds">'</span></span> };
<span class="pl-k">var</span> obj3 <span class="pl-k">=</span> {name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>obj<span class="pl-pds">'</span></span>, age<span class="pl-k">:</span> <span class="pl-c1">20</span>, sex<span class="pl-k">:</span> <span class="pl-c1">1</span>};</pre></div>
        <h5><a href="#强制-行尾不得有多余的空格" aria-hidden="true" class="anchor" id="user-content-强制-行尾不得有多余的空格"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 行尾不得有多余的空格。</h5>
        <h4><a href="#223-换行" aria-hidden="true" class="anchor" id="user-content-223-换行"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.2.3 换行</h4>
        <h5><a href="#强制-每个独立语句结束后必须换行" aria-hidden="true" class="anchor" id="user-content-强制-每个独立语句结束后必须换行"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 每个独立语句结束后必须换行。</h5>
        <h5><a href="#强制-每行不得超过-120-个字符" aria-hidden="true" class="anchor" id="user-content-强制-每行不得超过-120-个字符"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 每行不得超过 <code>120</code> 个字符。</h5>
        <p>解释：</p>
        <p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p>
        <h5><a href="#强制-运算符处换行时运算符必须在新行的行首" aria-hidden="true" class="anchor" id="user-content-强制-运算符处换行时运算符必须在新行的行首"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 运算符处换行时，运算符必须在新行的行首。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (<span class="pl-smi">user</span>.<span class="pl-en">isAuthenticated</span>()
    <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">user</span>.<span class="pl-en">isInRole</span>(<span class="pl-s"><span class="pl-pds">'</span>admin<span class="pl-pds">'</span></span>)
    <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>add-admin<span class="pl-pds">'</span></span>)
    <span class="pl-k">||</span> <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>delete-admin<span class="pl-pds">'</span></span>)
) {
    <span class="pl-c"><span class="pl-c">//</span> Code</span>
}

<span class="pl-k">var</span> result <span class="pl-k">=</span> number1 <span class="pl-k">+</span> number2 <span class="pl-k">+</span> number3
    <span class="pl-k">+</span> number4 <span class="pl-k">+</span> number5;


<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (<span class="pl-smi">user</span>.<span class="pl-en">isAuthenticated</span>() <span class="pl-k">&amp;&amp;</span>
    <span class="pl-smi">user</span>.<span class="pl-en">isInRole</span>(<span class="pl-s"><span class="pl-pds">'</span>admin<span class="pl-pds">'</span></span>) <span class="pl-k">&amp;&amp;</span>
    <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>add-admin<span class="pl-pds">'</span></span>) <span class="pl-k">||</span>
    <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>delete-admin<span class="pl-pds">'</span></span>)) {
    <span class="pl-c"><span class="pl-c">//</span> Code</span>
}

<span class="pl-k">var</span> result <span class="pl-k">=</span> number1 <span class="pl-k">+</span> number2 <span class="pl-k">+</span> number3 <span class="pl-k">+</span>
    number4 <span class="pl-k">+</span> number5;</pre></div>
        <h5><a href="#强制-在函数声明函数表达式函数调用对象创建数组创建for-语句等场景中不允许在--或--前换行" aria-hidden="true" class="anchor" id="user-content-强制-在函数声明函数表达式函数调用对象创建数组创建for-语句等场景中不允许在--或--前换行"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、<code>for</code> 语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
    a<span class="pl-k">:</span> <span class="pl-c1">1</span>,
    b<span class="pl-k">:</span> <span class="pl-c1">2</span>,
    c<span class="pl-k">:</span> <span class="pl-c1">3</span>
};

<span class="pl-en">foo</span>(
    aVeryVeryLongArgument,
    anotherVeryLongArgument,
    callback
);


<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
    a<span class="pl-k">:</span> <span class="pl-c1">1</span>
    , b<span class="pl-k">:</span> <span class="pl-c1">2</span>
    , c<span class="pl-k">:</span> <span class="pl-c1">3</span>
};

<span class="pl-en">foo</span>(
    aVeryVeryLongArgument
    , anotherVeryLongArgument
    , callback
);</pre></div>
        <h5><a href="#建议-不同行为或逻辑的语句集使用空行隔开更易阅读" aria-hidden="true" class="anchor" id="user-content-建议-不同行为或逻辑的语句集使用空行隔开更易阅读"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 仅为按逻辑换行的示例，不代表setStyle的最优实现</span>
<span class="pl-k">function</span> <span class="pl-en">setStyle</span>(<span class="pl-smi">element</span>, <span class="pl-smi">property</span>, <span class="pl-smi">value</span>) {
    <span class="pl-k">if</span> (element <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
        <span class="pl-k">return</span>;
    }

    <span class="pl-smi">element</span>.<span class="pl-c1">style</span>[property] <span class="pl-k">=</span> value;
}</pre></div>
        <h5><a href="#建议-在语句的行长度超过-120-时根据逻辑条件合理缩进" aria-hidden="true" class="anchor" id="user-content-建议-在语句的行长度超过-120-时根据逻辑条件合理缩进"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span>
<span class="pl-c"><span class="pl-c">//</span> 建议最终将右括号 ) 与左大括号 { 放在独立一行，保证与 `if` 内语句块能容易视觉辨识。</span>
<span class="pl-k">if</span> (<span class="pl-smi">user</span>.<span class="pl-en">isAuthenticated</span>()
    <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">user</span>.<span class="pl-en">isInRole</span>(<span class="pl-s"><span class="pl-pds">'</span>admin<span class="pl-pds">'</span></span>)
    <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>add-admin<span class="pl-pds">'</span></span>)
    <span class="pl-k">||</span> <span class="pl-smi">user</span>.<span class="pl-en">hasAuthority</span>(<span class="pl-s"><span class="pl-pds">'</span>delete-admin<span class="pl-pds">'</span></span>)
) {
    <span class="pl-c"><span class="pl-c">//</span> Code</span>
}

<span class="pl-c"><span class="pl-c">//</span> 按一定长度截断字符串，并使用 + 运算符进行连接。</span>
<span class="pl-c"><span class="pl-c">//</span> 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span>
<span class="pl-c"><span class="pl-c">//</span> 特别的，对于 HTML 片段的拼接，通过缩进，保持和 HTML 相同的结构。</span>
<span class="pl-k">var</span> html <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span> <span class="pl-c"><span class="pl-c">//</span> 此处用一个空字符串，以便整个 HTML 片段都在新行严格对齐</span>
    <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;article&gt;<span class="pl-pds">'</span></span>
    <span class="pl-k">+</span>     <span class="pl-s"><span class="pl-pds">'</span>&lt;h1&gt;Title here&lt;/h1&gt;<span class="pl-pds">'</span></span>
    <span class="pl-k">+</span>     <span class="pl-s"><span class="pl-pds">'</span>&lt;p&gt;This is a paragraph&lt;/p&gt;<span class="pl-pds">'</span></span>
    <span class="pl-k">+</span>     <span class="pl-s"><span class="pl-pds">'</span>&lt;footer&gt;Complete&lt;/footer&gt;<span class="pl-pds">'</span></span>
    <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;/article&gt;<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> 也可使用数组来进行拼接，相对 `+` 更容易调整缩进。</span>
<span class="pl-k">var</span> html <span class="pl-k">=</span> [
    <span class="pl-s"><span class="pl-pds">'</span>&lt;article&gt;<span class="pl-pds">'</span></span>,
        <span class="pl-s"><span class="pl-pds">'</span>&lt;h1&gt;Title here&lt;/h1&gt;<span class="pl-pds">'</span></span>,
        <span class="pl-s"><span class="pl-pds">'</span>&lt;p&gt;This is a paragraph&lt;/p&gt;<span class="pl-pds">'</span></span>,
        <span class="pl-s"><span class="pl-pds">'</span>&lt;footer&gt;Complete&lt;/footer&gt;<span class="pl-pds">'</span></span>,
    <span class="pl-s"><span class="pl-pds">'</span>&lt;/article&gt;<span class="pl-pds">'</span></span>
];
html <span class="pl-k">=</span> <span class="pl-smi">html</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>);

<span class="pl-c"><span class="pl-c">//</span> 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span>
<span class="pl-c"><span class="pl-c">//</span> 所有参数必须增加一个缩进。</span>
<span class="pl-en">foo</span>(
    aVeryVeryLongArgument,
    anotherVeryLongArgument,
    callback
);

<span class="pl-c"><span class="pl-c">//</span> 也可以按逻辑对参数进行组合。</span>
<span class="pl-c"><span class="pl-c">//</span> 最经典的是 baidu.format 函数，调用时将参数分为“模板”和“数据”两块</span>
<span class="pl-smi">baidu</span>.<span class="pl-en">format</span>(
    dateFormatTemplate,
    year, month, date, hour, minute, second
);

<span class="pl-c"><span class="pl-c">//</span> 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span>
<span class="pl-c"><span class="pl-c">//</span> 这通常出现在匿名函数或者对象初始化等作为参数时，如 `setTimeout` 函数等。</span>
<span class="pl-c1">setTimeout</span>(
    <span class="pl-k">function</span> () {
        <span class="pl-en">alert</span>(<span class="pl-s"><span class="pl-pds">'</span>hello<span class="pl-pds">'</span></span>);
    },
    <span class="pl-c1">200</span>
);

<span class="pl-smi">order</span>.<span class="pl-c1">data</span>.<span class="pl-en">read</span>(
    <span class="pl-s"><span class="pl-pds">'</span>id=<span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-smi">me</span>.<span class="pl-smi">model</span>.<span class="pl-c1">id</span>,
    <span class="pl-k">function</span> (<span class="pl-smi">data</span>) {
        <span class="pl-smi">me</span>.<span class="pl-en">attchToModel</span>(<span class="pl-smi">data</span>.<span class="pl-smi">result</span>);
        <span class="pl-en">callback</span>();
    },
    <span class="pl-c1">300</span>
);

<span class="pl-c"><span class="pl-c">//</span> 链式调用较长时采用缩进进行调整。</span>
<span class="pl-en">$</span>(<span class="pl-s"><span class="pl-pds">'</span>#items<span class="pl-pds">'</span></span>)
    .<span class="pl-c1">find</span>(<span class="pl-s"><span class="pl-pds">'</span>.selected<span class="pl-pds">'</span></span>)
    .<span class="pl-en">highlight</span>()
    .<span class="pl-en">end</span>();

<span class="pl-c"><span class="pl-c">//</span> 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span>
<span class="pl-k">var</span> result <span class="pl-k">=</span> thisIsAVeryVeryLongCondition
    <span class="pl-k">?</span> resultA <span class="pl-k">:</span> resultB;

<span class="pl-k">var</span> result <span class="pl-k">=</span> condition
    <span class="pl-k">?</span> thisIsAVeryVeryLongResult
    <span class="pl-k">:</span> resultB;

<span class="pl-c"><span class="pl-c">//</span> 数组和对象初始化的混用，严格按照每个对象的 `{` 和结束 `}` 在独立一行的风格书写。</span>
<span class="pl-k">var</span> array <span class="pl-k">=</span> [
    {
        <span class="pl-c"><span class="pl-c">//</span> ...</span>
    },
    {
        <span class="pl-c"><span class="pl-c">//</span> ...</span>
    }
];</pre></div>
        <h5><a href="#建议-对于-ifelsetrycatchfinally-等语句推荐使用在--号后添加一个换行-的风格使代码层次结构更清晰阅读性更好" aria-hidden="true" class="anchor" id="user-content-建议-对于-ifelsetrycatchfinally-等语句推荐使用在--号后添加一个换行-的风格使代码层次结构更清晰阅读性更好"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">if</span> (condition) {
    <span class="pl-c"><span class="pl-c">//</span> some statements;</span>
}
<span class="pl-k">else</span> {
    <span class="pl-c"><span class="pl-c">//</span> some statements;</span>
}

<span class="pl-k">try</span> {
    <span class="pl-c"><span class="pl-c">//</span> some statements;</span>
}
<span class="pl-k">catch</span> (ex) {
    <span class="pl-c"><span class="pl-c">//</span> some statements;</span>
}</pre></div>
        <h4><a href="#224-语句" aria-hidden="true" class="anchor" id="user-content-224-语句"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.2.4 语句</h4>
        <h5><a href="#强制-不得省略语句结束的分号" aria-hidden="true" class="anchor" id="user-content-强制-不得省略语句结束的分号"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 不得省略语句结束的分号。</h5>
        <h5><a href="#强制-在-if--else--for--do--while-语句中即使只有一行也不得省略块-" aria-hidden="true" class="anchor" id="user-content-强制-在-if--else--for--do--while-语句中即使只有一行也不得省略块-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (condition) {
    <span class="pl-en">callFunc</span>();
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (condition) <span class="pl-en">callFunc</span>();
<span class="pl-k">if</span> (condition)
    <span class="pl-en">callFunc</span>();</pre></div>
        <h5><a href="#强制-函数定义结束不允许添加分号" aria-hidden="true" class="anchor" id="user-content-强制-函数定义结束不允许添加分号"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 函数定义结束不允许添加分号。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">function</span> <span class="pl-en">funcName</span>() {
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">function</span> <span class="pl-en">funcName</span>() {
};

<span class="pl-c"><span class="pl-c">//</span> 如果是函数表达式，分号是不允许省略的。</span>
<span class="pl-k">var</span> <span class="pl-en">funcName</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
};</pre></div>
        <h5><a href="#强制-iife-必须在函数表达式外添加-非-iife-不得在函数表达式外添加-" aria-hidden="true" class="anchor" id="user-content-强制-iife-必须在函数表达式外添加-非-iife-不得在函数表达式外添加-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5>
        <p>解释：</p>
        <p>IIFE = Immediately-Invoked Function Expression.</p>
        <p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> task <span class="pl-k">=</span> (<span class="pl-k">function</span> () {
   <span class="pl-c"><span class="pl-c">//</span> Code</span>
   <span class="pl-k">return</span> result;
})();

<span class="pl-k">var</span> <span class="pl-en">func</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
};


<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> <span class="pl-en">task</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-c"><span class="pl-c">//</span> Code</span>
    <span class="pl-k">return</span> result;
}();

<span class="pl-k">var</span> func <span class="pl-k">=</span> (<span class="pl-k">function</span> () {
});</pre></div>
        <h3><a href="#23-命名" aria-hidden="true" class="anchor" id="user-content-23-命名"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.3 命名</h3>
        <h5><a href="#强制-变量-使用-camel命名法" aria-hidden="true" class="anchor" id="user-content-强制-变量-使用-camel命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> loadingModules <span class="pl-k">=</span> {};</pre></div>
        <h5><a href="#强制-常量-使用-全部字母大写单词间下划线分隔-的命名方式" aria-hidden="true" class="anchor" id="user-content-强制-常量-使用-全部字母大写单词间下划线分隔-的命名方式"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> <span class="pl-c1">HTML_ENTITY</span> <span class="pl-k">=</span> {};</pre></div>
        <h5><a href="#强制-函数-使用-camel命名法" aria-hidden="true" class="anchor" id="user-content-强制-函数-使用-camel命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">stringFormat</span>(<span class="pl-smi">source</span>) {
}</pre></div>
        <h5><a href="#强制-函数的-参数-使用-camel命名法" aria-hidden="true" class="anchor" id="user-content-强制-函数的-参数-使用-camel命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">hear</span>(<span class="pl-smi">theBells</span>) {
}</pre></div>
        <h5><a href="#强制-类-使用-pascal命名法" aria-hidden="true" class="anchor" id="user-content-强制-类-使用-pascal命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">TextNode</span>(<span class="pl-smi">options</span>) {
}</pre></div>
        <h5><a href="#强制-类的-方法--属性-使用-camel命名法" aria-hidden="true" class="anchor" id="user-content-强制-类的-方法--属性-使用-camel命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 类的 <code>方法</code> / <code>属性</code> 使用 <code>Camel命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">TextNode</span>(<span class="pl-smi">value</span>, <span class="pl-smi">engine</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">value</span> <span class="pl-k">=</span> value;
    <span class="pl-c1">this</span>.<span class="pl-smi">engine</span> <span class="pl-k">=</span> engine;
}

<span class="pl-smi">TextNode</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-k">return</span> <span class="pl-c1">this</span>;
};</pre></div>
        <h5><a href="#强制-枚举变量-使用-pascal命名法枚举的属性-使用-全部字母大写单词间下划线分隔-的命名方式" aria-hidden="true" class="anchor" id="user-content-强制-枚举变量-使用-pascal命名法枚举的属性-使用-全部字母大写单词间下划线分隔-的命名方式"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> TargetState <span class="pl-k">=</span> {
    <span class="pl-c1">READING</span><span class="pl-k">:</span> <span class="pl-c1">1</span>,
    <span class="pl-c1">READED</span><span class="pl-k">:</span> <span class="pl-c1">2</span>,
    <span class="pl-c1">APPLIED</span><span class="pl-k">:</span> <span class="pl-c1">3</span>,
    <span class="pl-c1">READY</span><span class="pl-k">:</span> <span class="pl-c1">4</span>
};</pre></div>
        <h5><a href="#强制-命名空间-使用-camel命名法" aria-hidden="true" class="anchor" id="user-content-强制-命名空间-使用-camel命名法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-smi">equipments</span>.<span class="pl-smi">heavyWeapons</span> <span class="pl-k">=</span> {};</pre></div>
        <h5><a href="#强制-由多个单词组成的缩写词在命名中根据当前命名法和出现的位置所有字母的大小写与首字母的大小写保持一致" aria-hidden="true" class="anchor" id="user-content-强制-由多个单词组成的缩写词在命名中根据当前命名法和出现的位置所有字母的大小写与首字母的大小写保持一致"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">XMLParser</span>() {
}

<span class="pl-k">function</span> <span class="pl-en">insertHTML</span>(<span class="pl-smi">element</span>, <span class="pl-smi">html</span>) {
}

<span class="pl-k">var</span> httpRequest <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">HTTPRequest</span>();</pre></div>
        <h5><a href="#强制-类名-使用-名词" aria-hidden="true" class="anchor" id="user-content-强制-类名-使用-名词"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Engine</span>(<span class="pl-smi">options</span>) {
}</pre></div>
        <h5><a href="#建议-函数名-使用-动宾短语" aria-hidden="true" class="anchor" id="user-content-建议-函数名-使用-动宾短语"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getStyle</span>(<span class="pl-smi">element</span>) {
}</pre></div>
        <h5><a href="#建议-boolean-类型的变量使用-is-或-has-开头" aria-hidden="true" class="anchor" id="user-content-建议-boolean-类型的变量使用-is-或-has-开头"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> isReady <span class="pl-k">=</span> <span class="pl-c1">false</span>;
<span class="pl-k">var</span> hasMoreCommands <span class="pl-k">=</span> <span class="pl-c1">false</span>;</pre></div>
        <h5><a href="#建议-promise对象-用-动宾短语的进行时-表达" aria-hidden="true" class="anchor" id="user-content-建议-promise对象-用-动宾短语的进行时-表达"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> loadingData <span class="pl-k">=</span> <span class="pl-smi">ajax</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">'</span>url<span class="pl-pds">'</span></span>);
<span class="pl-smi">loadingData</span>.<span class="pl-en">then</span>(callback);</pre></div>
        <h3><a href="#24-注释" aria-hidden="true" class="anchor" id="user-content-24-注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4 注释</h3>
        <h4><a href="#241-单行注释" aria-hidden="true" class="anchor" id="user-content-241-单行注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.1 单行注释</h4>
        <h5><a href="#强制-必须独占一行-后跟一个空格缩进与下一行被注释说明的代码一致" aria-hidden="true" class="anchor" id="user-content-强制-必须独占一行-后跟一个空格缩进与下一行被注释说明的代码一致"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5>
        <h4><a href="#242-多行注释" aria-hidden="true" class="anchor" id="user-content-242-多行注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.2 多行注释</h4>
        <h5><a href="#建议-避免使用--这样的多行注释有多行注释内容时使用多个单行注释" aria-hidden="true" class="anchor" id="user-content-建议-避免使用--这样的多行注释有多行注释内容时使用多个单行注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5>
        <h4><a href="#243-文档化注释" aria-hidden="true" class="anchor" id="user-content-243-文档化注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.3 文档化注释</h4>
        <h5><a href="#强制-为了便于代码阅读和自文档化以下内容必须包含以--形式的块注释中" aria-hidden="true" class="anchor" id="user-content-强制-为了便于代码阅读和自文档化以下内容必须包含以--形式的块注释中"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5>
        <p>解释：</p>
        <ol>
            <li>文件</li>
            <li>namespace</li>
            <li>类</li>
            <li>函数或方法</li>
            <li>类属性</li>
            <li>事件</li>
            <li>全局变量</li>
            <li>常量</li>
            <li>AMD 模块</li>
        </ol>
        <h5><a href="#强制-文档注释前必须空一行" aria-hidden="true" class="anchor" id="user-content-强制-文档注释前必须空一行"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 文档注释前必须空一行。</h5>
        <h5><a href="#建议-自文档化的文档说明-what而不是-how" aria-hidden="true" class="anchor" id="user-content-建议-自文档化的文档说明-what而不是-how"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 自文档化的文档说明 what，而不是 how。</h5>
        <h4><a href="#244-类型定义" aria-hidden="true" class="anchor" id="user-content-244-类型定义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.4 类型定义</h4>
        <h5><a href="#强制-类型定义都是以--开始-以--结束" aria-hidden="true" class="anchor" id="user-content-强制-类型定义都是以--开始-以--结束"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 类型定义都是以 <code>{</code> 开始, 以 <code>}</code> 结束。</h5>
        <p>解释：</p>
        <p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>
        <p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>
        <h5><a href="#强制-对于基本类型-string-number-boolean首字母必须小写" aria-hidden="true" class="anchor" id="user-content-强制-对于基本类型-string-number-boolean首字母必须小写"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5>
        <table>
            <thead>
            <tr>
                <th>类型定义</th>
                <th>语法示例</th>
                <th>解释</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>String</td>
                <td>{string}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Number</td>
                <td>{number}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Boolean</td>
                <td>{boolean}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Object</td>
                <td>{Object}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Function</td>
                <td>{Function}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>RegExp</td>
                <td>{RegExp}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Array</td>
                <td>{Array}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>Date</td>
                <td>{Date}</td>
                <td>--</td>
            </tr>
            <tr>
                <td>单一类型集合</td>
                <td>{Array.&lt;string&gt;}</td>
                <td>string 类型的数组</td>
            </tr>
            <tr>
                <td>多类型</td>
                <td>{(number｜boolean)}</td>
                <td>可能是 number 类型, 也可能是 boolean 类型</td>
            </tr>
            <tr>
                <td>允许为null</td>
                <td>{?number}</td>
                <td>可能是 number, 也可能是 null</td>
            </tr>
            <tr>
                <td>不允许为null</td>
                <td>{!Object}</td>
                <td>Object 类型, 但不是 null</td>
            </tr>
            <tr>
                <td>Function类型</td>
                <td>{function(number, boolean)}</td>
                <td>函数, 形参类型</td>
            </tr>
            <tr>
                <td>Function带返回值</td>
                <td>{function(number, boolean):string}</td>
                <td>函数, 形参, 返回值类型</td>
            </tr>
            <tr>
                <td>Promise</td>
                <td>Promise.&lt;resolveType, rejectType&gt;</td>
                <td>Promise，成功返回的数据类型，失败返回的错误类型</td>
            </tr>
            <tr>
                <td>参数可选</td>
                <td>@param {string=} name</td>
                <td>可选参数, =为类型后缀</td>
            </tr>
            <tr>
                <td>可变参数</td>
                <td>@param {...number} args</td>
                <td>变长参数,  ...为类型前缀</td>
            </tr>
            <tr>
                <td>任意类型</td>
                <td>{*}</td>
                <td>任意类型</td>
            </tr>
            <tr>
                <td>可选任意类型</td>
                <td>@param {*=} name</td>
                <td>可选参数，类型不限</td>
            </tr>
            <tr>
                <td>可变任意类型</td>
                <td>@param {...*} args</td>
                <td>变长参数，类型不限</td>
            </tr></tbody></table>
        <h4><a href="#245-文件注释" aria-hidden="true" class="anchor" id="user-content-245-文件注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.5 文件注释</h4>
        <h5><a href="#强制-文件顶部必须包含文件注释用-file-标识文件说明" aria-hidden="true" class="anchor" id="user-content-强制-文件顶部必须包含文件注释用-file-标识文件说明"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * <span class="pl-k">@file</span> Describe the file</span>
<span class="pl-c"> <span class="pl-c">*/</span></span></pre></div>
        <h5><a href="#建议-文件注释中可以用-author-标识开发者信息" aria-hidden="true" class="anchor" id="user-content-建议-文件注释中可以用-author-标识开发者信息"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5>
        <p>解释：</p>
        <p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p>
        <p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p>
        <p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>
        <p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p>
        <p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * <span class="pl-k">@file</span> Describe the file</span>
<span class="pl-c"> * <span class="pl-k">@author</span> <span class="pl-en">author-name(mail-name</span>@domain.com)</span>
<span class="pl-c"> *         author-name2(mail-name2@domain.com)</span>
<span class="pl-c"> <span class="pl-c">*/</span></span></pre></div>
        <h4><a href="#246-命名空间注释" aria-hidden="true" class="anchor" id="user-content-246-命名空间注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.6 命名空间注释</h4>
        <h5><a href="#建议-命名空间使用-namespace-标识" aria-hidden="true" class="anchor" id="user-content-建议-命名空间使用-namespace-标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * <span class="pl-k">@namespace</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> util <span class="pl-k">=</span> {};</pre></div>
        <h4><a href="#247-类注释" aria-hidden="true" class="anchor" id="user-content-247-类注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.7 类注释</h4>
        <h5><a href="#建议-使用-class-标记类或构造函数" aria-hidden="true" class="anchor" id="user-content-建议-使用-class-标记类或构造函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5>
        <p>解释：</p>
        <p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@class</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">Developer</span>() {
    <span class="pl-c"><span class="pl-c">//</span> constructor body</span>
}</pre></div>
        <h5><a href="#建议-使用-extends-标记类的继承信息" aria-hidden="true" class="anchor" id="user-content-建议-使用-extends-标记类的继承信息"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@class</span></span>
<span class="pl-c"> * <span class="pl-k">@extends</span> <span class="pl-en">Developer</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">Fronteer</span>() {
    <span class="pl-smi">Developer</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);
    <span class="pl-c"><span class="pl-c">//</span> constructor body</span>
}
<span class="pl-smi">util</span>.<span class="pl-en">inherits</span>(Fronteer, Developer);</pre></div>
        <h5><a href="#强制-使用包装方式扩展类成员时-必须通过-lends-进行重新指向" aria-hidden="true" class="anchor" id="user-content-强制-使用包装方式扩展类成员时-必须通过-lends-进行重新指向"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5>
        <p>解释：</p>
        <p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 类描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@class</span></span>
<span class="pl-c"> * <span class="pl-k">@extends</span> <span class="pl-en">Developer</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">Fronteer</span>() {
    <span class="pl-smi">Developer</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);
    <span class="pl-c"><span class="pl-c">//</span> constructor body</span>
}

<span class="pl-smi">util</span>.<span class="pl-en">extend</span>(
    <span class="pl-smi">Fronteer</span>.<span class="pl-c1">prototype</span>,
    <span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@lends</span> <span class="pl-en">Fronteer.prototype</span> <span class="pl-c">*/</span></span>{
        <span class="pl-en">getLevel</span><span class="pl-k">:</span> <span class="pl-k">function</span> () {
            <span class="pl-c"><span class="pl-c">//</span> TODO</span>
        }
    }
);</pre></div>
        <h5><a href="#强制-类的属性或方法等成员信息不是-public-的应使用-protected-或-private-标识可访问性" aria-hidden="true" class="anchor" id="user-content-强制-类的属性或方法等成员信息不是-public-的应使用-protected-或-private-标识可访问性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 类的属性或方法等成员信息不是 <code>public</code> 的，应使用 <code>@protected</code> 或 <code>@private</code> 标识可访问性。</h5>
        <p>解释：</p>
        <p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 类描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@class</span></span>
<span class="pl-c"> * <span class="pl-k">@extends</span> <span class="pl-en">Developer</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> <span class="pl-en">Fronteer</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-smi">Developer</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>);

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 属性描述</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@type</span> <span class="pl-en">{string}</span></span>
<span class="pl-c">     * <span class="pl-k">@private</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">this</span>.<span class="pl-smi">level</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>T12<span class="pl-pds">'</span></span>;

    <span class="pl-c"><span class="pl-c">//</span> constructor body</span>
};
<span class="pl-smi">util</span>.<span class="pl-en">inherits</span>(Fronteer, Developer);

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 方法描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@private</span></span>
<span class="pl-c"> * <span class="pl-k">@return</span> <span class="pl-en">{string}</span> 返回值描述</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-smi">Fronteer</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getLevel</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
};</pre></div>
        <h4><a href="#248-函数方法注释" aria-hidden="true" class="anchor" id="user-content-248-函数方法注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.8 函数/方法注释</h4>
        <h5><a href="#强制-函数方法注释必须包含函数说明有参数和返回值时必须使用注释标识" aria-hidden="true" class="anchor" id="user-content-强制-函数方法注释必须包含函数说明有参数和返回值时必须使用注释标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5>
        <p>解释：</p>
        <p>当 <code>return</code> 关键字仅作退出函数/方法使用时，无须对返回值作注释标识。</p>
        <h5><a href="#强制-参数和返回值注释必须包含类型信息且不允许省略参数的说明" aria-hidden="true" class="anchor" id="user-content-强制-参数和返回值注释必须包含类型信息且不允许省略参数的说明"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。</h5>
        <h5><a href="#建议-当函数是内部函数外部不可访问时可以使用-inner-标识" aria-hidden="true" class="anchor" id="user-content-建议-当函数是内部函数外部不可访问时可以使用-inner-标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 函数描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">p1</span> 参数1的说明</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">p2</span> 参数2的说明，比较长</span>
<span class="pl-c"> *     那就换行了.</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{number=}</span> <span class="pl-smi">p3</span> 参数3的说明（可选）</span>
<span class="pl-c"> * <span class="pl-k">@return</span> <span class="pl-en">{Object}</span> 返回值描述</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">p1</span>, <span class="pl-smi">p2</span>, <span class="pl-smi">p3</span>) {
    <span class="pl-k">var</span> p3 <span class="pl-k">=</span> p3 <span class="pl-k">||</span> <span class="pl-c1">10</span>;
    <span class="pl-k">return</span> {
        p1<span class="pl-k">:</span> p1,
        p2<span class="pl-k">:</span> p2,
        p3<span class="pl-k">:</span> p3
    };
}</pre></div>
        <h5><a href="#强制-对-object-中各项的描述-必须使用-param-标识" aria-hidden="true" class="anchor" id="user-content-强制-对-object-中各项的描述-必须使用-param-标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 函数描述</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Object}</span> <span class="pl-smi">option</span> 参数描述</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">option.url</span> option项描述</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string=}</span> <span class="pl-smi">option.method</span> option项描述，可选参数</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">option</span>) {
    <span class="pl-c"><span class="pl-c">//</span> TODO</span>
}</pre></div>
        <h5><a href="#建议-重写父类方法时-应当添加-override-标识如果重写的形参个数类型顺序和返回值类型均未发生变化可省略-paramreturn仅用-override-标识否则仍应作完整注释" aria-hidden="true" class="anchor" id="user-content-建议-重写父类方法时-应当添加-override-标识如果重写的形参个数类型顺序和返回值类型均未发生变化可省略-paramreturn仅用-override-标识否则仍应作完整注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5>
        <p>解释：</p>
        <p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p>
        <h4><a href="#249-事件注释" aria-hidden="true" class="anchor" id="user-content-249-事件注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.9 事件注释</h4>
        <h5><a href="#强制-必须使用-event-标识事件事件参数的标识与方法描述的参数标识相同" aria-hidden="true" class="anchor" id="user-content-强制-必须使用-event-标识事件事件参数的标识与方法描述的参数标识相同"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 值变更时触发</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@event</span> <span class="pl-en">Select#change</span></span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Object}</span> <span class="pl-smi">e</span> e描述</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.before</span> before描述</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.after</span> after描述</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-c1">this</span>.<span class="pl-en">fire</span>(
    <span class="pl-s"><span class="pl-pds">'</span>change<span class="pl-pds">'</span></span>,
    {
        before<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>,
        after<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span>
    }
);</pre></div>
        <h5><a href="#强制-在会广播事件的函数前使用-fires-标识广播的事件在广播事件代码前使用-event-标识事件" aria-hidden="true" class="anchor" id="user-content-强制-在会广播事件的函数前使用-fires-标识广播的事件在广播事件代码前使用-event-标识事件"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5>
        <h5><a href="#建议-对于事件对象的注释使用-param-标识生成文档时可读性更好" aria-hidden="true" class="anchor" id="user-content-建议-对于事件对象的注释使用-param-标识生成文档时可读性更好"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 点击处理</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@fires</span> <span class="pl-en">Select#change</span></span>
<span class="pl-c"> * <span class="pl-k">@private</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-smi">Select</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clickHandler</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {

    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 值变更时触发</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@event</span> <span class="pl-en">Select#change</span></span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{Object}</span> <span class="pl-smi">e</span> e描述</span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.before</span> before描述</span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.after</span> after描述</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">this</span>.<span class="pl-en">fire</span>(
        <span class="pl-s"><span class="pl-pds">'</span>change<span class="pl-pds">'</span></span>,
        {
            before<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>,
            after<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span>
        }
    );
};</pre></div>
        <h4><a href="#2410-常量注释" aria-hidden="true" class="anchor" id="user-content-2410-常量注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.10 常量注释</h4>
        <h5><a href="#强制-常量必须使用-const-标记并包含说明和类型信息" aria-hidden="true" class="anchor" id="user-content-强制-常量必须使用-const-标记并包含说明和类型信息"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 常量说明</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@const</span></span>
<span class="pl-c"> * <span class="pl-k">@type</span> <span class="pl-en">{string}</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> <span class="pl-c1">REQUEST_URL</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>myurl.do<span class="pl-pds">'</span></span>;</pre></div>
        <h4><a href="#2411-复杂类型注释" aria-hidden="true" class="anchor" id="user-content-2411-复杂类型注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.11 复杂类型注释</h4>
        <h5><a href="#建议-对于类型未定义的复杂结构的注释可以使用-typedef-标识来定义" aria-hidden="true" class="anchor" id="user-content-建议-对于类型未定义的复杂结构的注释可以使用-typedef-标识来定义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span>
<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 服务器</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@typedef</span> <span class="pl-en">{Object}</span> <span class="pl-en">namespaceA~Server</span></span>
<span class="pl-c"> * <span class="pl-k">@property</span> <span class="pl-en">{string}</span> <span class="pl-smi">host</span> 主机</span>
<span class="pl-c"> * <span class="pl-k">@property</span> <span class="pl-en">{number}</span> <span class="pl-smi">port</span> 端口</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 服务器列表</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@type</span> <span class="pl-en">{Array.&lt;namespaceA~Server&gt;}</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> servers <span class="pl-k">=</span> [
    {
        host<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>1.2.3.4<span class="pl-pds">'</span></span>,
        port<span class="pl-k">:</span> <span class="pl-c1">8080</span>
    },
    {
        host<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>1.2.3.5<span class="pl-pds">'</span></span>,
        port<span class="pl-k">:</span> <span class="pl-c1">8081</span>
    }
];</pre></div>
        <h4><a href="#2412-amd-模块注释" aria-hidden="true" class="anchor" id="user-content-2412-amd-模块注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.12 AMD 模块注释</h4>
        <h5><a href="#强制-amd-模块使用-module-或-exports-标识" aria-hidden="true" class="anchor" id="user-content-强制-amd-模块使用-module-或-exports-标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5>
        <p>解释：</p>
        <p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {

        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * foo description</span>
<span class="pl-c">         *</span>
<span class="pl-c">         * <span class="pl-k">@exports</span> <span class="pl-en">Foo</span></span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-k">var</span> foo <span class="pl-k">=</span> {
            <span class="pl-c"><span class="pl-c">//</span> TODO</span>
        };

        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * baz description</span>
<span class="pl-c">         *</span>
<span class="pl-c">         * <span class="pl-k">@return</span> <span class="pl-en">{boolean}</span> return description</span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-smi">foo</span>.<span class="pl-en">baz</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
            <span class="pl-c"><span class="pl-c">//</span> TODO</span>
        };

        <span class="pl-k">return</span> foo;

    }
);</pre></div>
        <p>也可以在 exports 变量前使用 @module 标识：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {

        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * module description.</span>
<span class="pl-c">         *</span>
<span class="pl-c">         * <span class="pl-k">@module</span> <span class="pl-en">foo</span></span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> {};


        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * bar description</span>
<span class="pl-c">         *</span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-c1">exports</span>.<span class="pl-en">bar</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
            <span class="pl-c"><span class="pl-c">//</span> TODO</span>
        };

        <span class="pl-k">return</span> <span class="pl-c1">exports</span>;
    }
);</pre></div>
        <p>如果直接使用 factory 的 exports 参数，还可以：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * module description.</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@module</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>, <span class="pl-c1">exports</span>) {

        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * bar description</span>
<span class="pl-c">         *</span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-c1">exports</span>.<span class="pl-en">bar</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
            <span class="pl-c"><span class="pl-c">//</span> TODO</span>
        };
        <span class="pl-k">return</span> <span class="pl-c1">exports</span>;
    }
);</pre></div>
        <h5><a href="#强制-对于已使用-module-标识为-amd模块-的引用在-namepaths-中必须增加-module-作前缀" aria-hidden="true" class="anchor" id="user-content-强制-对于已使用-module-标识为-amd模块-的引用在-namepaths-中必须增加-module-作前缀"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5>
        <p>解释：</p>
        <p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 点击处理</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@fires</span> <span class="pl-en">module:Select#change</span></span>
<span class="pl-c"> * <span class="pl-k">@private</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-smi">Select</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clickHandler</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * 值变更时触发</span>
<span class="pl-c">     *</span>
<span class="pl-c">     * <span class="pl-k">@event</span> <span class="pl-en">module:Select#change</span></span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{Object}</span> <span class="pl-smi">e</span> e描述</span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.before</span> before描述</span>
<span class="pl-c">     * <span class="pl-k">@param</span> <span class="pl-en">{string}</span> <span class="pl-smi">e.after</span> after描述</span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-c1">this</span>.<span class="pl-en">fire</span>(
        <span class="pl-s"><span class="pl-pds">'</span>change<span class="pl-pds">'</span></span>,
        {
            before<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>,
            after<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span>
        }
    );
};</pre></div>
        <h5><a href="#建议-对于类定义的模块可以使用-alias-标识构建函数" aria-hidden="true" class="anchor" id="user-content-建议-对于类定义的模块可以使用-alias-标识构建函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * A module representing a jacket.</span>
<span class="pl-c"> * <span class="pl-k">@module</span> <span class="pl-en">jacket</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-en">define</span>(
    <span class="pl-k">function</span> () {

        <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">         * <span class="pl-k">@class</span></span>
<span class="pl-c">         * <span class="pl-k">@alias</span> <span class="pl-en">module:jacket</span></span>
<span class="pl-c">         <span class="pl-c">*/</span></span>
        <span class="pl-k">var</span> <span class="pl-en">Jacket</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
        };

        <span class="pl-k">return</span> Jacket;
    }
);</pre></div>
        <h5><a href="#建议-多模块定义时可以使用-exports-标识各个模块" aria-hidden="true" class="anchor" id="user-content-建议-多模块定义时可以使用-exports-标识各个模块"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> one module</span>
<span class="pl-en">define</span>(<span class="pl-s"><span class="pl-pds">'</span>html/utils<span class="pl-pds">'</span></span>,
    <span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c">     * Utility functions to ease working with DOM elements.</span>
<span class="pl-c">     * <span class="pl-k">@exports</span> <span class="pl-en">html/utils</span></span>
<span class="pl-c">     <span class="pl-c">*/</span></span>
    <span class="pl-k">function</span> () {
        <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> {
        };

        <span class="pl-k">return</span> <span class="pl-c1">exports</span>;
    }
);

<span class="pl-c"><span class="pl-c">//</span> another module</span>
<span class="pl-en">define</span>(<span class="pl-s"><span class="pl-pds">'</span>tag<span class="pl-pds">'</span></span>,
    <span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@exports</span> <span class="pl-en">tag</span> <span class="pl-c">*/</span></span>
    <span class="pl-k">function</span> () {
        <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> {
        };

        <span class="pl-k">return</span> <span class="pl-c1">exports</span>;
    }
);</pre></div>
        <h5><a href="#建议-对于-exports-为-object-的模块可以使用namespace标识" aria-hidden="true" class="anchor" id="user-content-建议-对于-exports-为-object-的模块可以使用namespace标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5>
        <p>解释：</p>
        <p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p>
        <h5><a href="#建议-对于-exports-为类名的模块使用-class-和-exports-标识" aria-hidden="true" class="anchor" id="user-content-建议-对于-exports-为类名的模块使用-class-和-exports-标识"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span>
<span class="pl-c"><span class="pl-c">//</span> 另外需要注意类名需要使用 var 定义的方式。</span>

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * Bar description</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@see</span> <span class="pl-en">foo</span></span>
<span class="pl-c"> * <span class="pl-k">@exports</span>  <span class="pl-en">Bar</span></span>
<span class="pl-c"> * <span class="pl-k">@class</span></span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> <span class="pl-en">Bar</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-c"><span class="pl-c">//</span> TODO</span>
};

<span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * baz description</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@return</span> <span class="pl-en">{(string|Array)}</span> return description</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-smi">Bar</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">baz</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-c"><span class="pl-c">//</span> TODO</span>
};</pre></div>
        <h4><a href="#2413-细节注释" aria-hidden="true" class="anchor" id="user-content-2413-细节注释"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.4.13 细节注释</h4>
        <p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>
        <h4><a href="#建议-细节注释遵循单行注释的格式说明必须换行时每行是一个单行注释的起始" aria-hidden="true" class="anchor" id="user-content-建议-细节注释遵循单行注释的格式说明必须换行时每行是一个单行注释的起始"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">p1</span>, <span class="pl-smi">p2</span>, <span class="pl-smi">opt_p3</span>) {
    <span class="pl-c"><span class="pl-c">//</span> 这里对具体内部逻辑进行说明</span>
    <span class="pl-c"><span class="pl-c">//</span> 说明太长需要换行</span>
    <span class="pl-k">for</span> (<span class="pl-k">...</span>) {
        <span class="pl-k">...</span>.
    }
}</pre></div>
        <h5><a href="#强制-有时我们会使用一些特殊标记进行说明特殊标记必须使用单行注释的形式下面列举了一些常用标记" aria-hidden="true" class="anchor" id="user-content-强制-有时我们会使用一些特殊标记进行说明特殊标记必须使用单行注释的形式下面列举了一些常用标记"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5>
        <p>解释：</p>
        <ol>
            <li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>
            <li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li>
            <li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>
            <li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>
        </ol>
        <h2><a href="#3-语言特性" aria-hidden="true" class="anchor" id="user-content-3-语言特性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3 语言特性</h2>
        <h3><a href="#31-变量" aria-hidden="true" class="anchor" id="user-content-31-变量"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.1 变量</h3>
        <h5><a href="#强制-变量函数在使用前必须先定义" aria-hidden="true" class="anchor" id="user-content-强制-变量函数在使用前必须先定义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 变量、函数在使用前必须先定义。</h5>
        <p>解释：</p>
        <p>不通过 var 定义变量将导致变量污染全局环境。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>MyName<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> bad</span>
name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>MyName<span class="pl-pds">'</span></span>;</pre></div>
        <p>原则上不建议使用全局变量，对于已有的全局变量或第三方框架引入的全局变量，需要根据检查工具的语法标识。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/*</span> globals jQuery <span class="pl-c">*/</span></span>
<span class="pl-k">var</span> element <span class="pl-k">=</span> <span class="pl-en">jQuery</span>(<span class="pl-s"><span class="pl-pds">'</span>#element-id<span class="pl-pds">'</span></span>);</pre></div>
        <h5><a href="#强制-每个-var-只能声明一个变量" aria-hidden="true" class="anchor" id="user-content-强制-每个-var-只能声明一个变量"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5>
        <p>解释：</p>
        <p>一个 <code>var</code> 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> hangModules <span class="pl-k">=</span> [];
<span class="pl-k">var</span> missModules <span class="pl-k">=</span> [];
<span class="pl-k">var</span> visited <span class="pl-k">=</span> {};

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> hangModules <span class="pl-k">=</span> [],
    missModules <span class="pl-k">=</span> [],
    visited <span class="pl-k">=</span> {};</pre></div>
        <h5><a href="#强制-变量必须-即用即声明不得在函数或其它形式的代码块起始位置统一声明所有变量" aria-hidden="true" class="anchor" id="user-content-强制-变量必须-即用即声明不得在函数或其它形式的代码块起始位置统一声明所有变量"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5>
        <p>解释：</p>
        <p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">function</span> <span class="pl-en">kv2List</span>(<span class="pl-smi">source</span>) {
    <span class="pl-k">var</span> list <span class="pl-k">=</span> [];

    <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> source) {
        <span class="pl-k">if</span> (<span class="pl-smi">source</span>.<span class="pl-en">hasOwnProperty</span>(key)) {
            <span class="pl-k">var</span> item <span class="pl-k">=</span> {
                k<span class="pl-k">:</span> key,
                v<span class="pl-k">:</span> source[key]
            };

            <span class="pl-smi">list</span>.<span class="pl-c1">push</span>(item);
        }
    }

    <span class="pl-k">return</span> list;
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">function</span> <span class="pl-en">kv2List</span>(<span class="pl-smi">source</span>) {
    <span class="pl-k">var</span> list <span class="pl-k">=</span> [];
    <span class="pl-k">var</span> key;
    <span class="pl-k">var</span> item;

    <span class="pl-k">for</span> (key <span class="pl-k">in</span> source) {
        <span class="pl-k">if</span> (<span class="pl-smi">source</span>.<span class="pl-en">hasOwnProperty</span>(key)) {
            item <span class="pl-k">=</span> {
                k<span class="pl-k">:</span> key,
                v<span class="pl-k">:</span> source[key]
            };

            <span class="pl-smi">list</span>.<span class="pl-c1">push</span>(item);
        }
    }

    <span class="pl-k">return</span> list;
}</pre></div>
        <h3><a href="#32-条件" aria-hidden="true" class="anchor" id="user-content-32-条件"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.2 条件</h3>
        <h5><a href="#强制-在-equality-expression-中使用类型严格的-仅当判断-null-或-undefined-时允许使用--null" aria-hidden="true" class="anchor" id="user-content-强制-在-equality-expression-中使用类型严格的-仅当判断-null-或-undefined-时允许使用--null"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 <code>null</code> 或 <code>undefined</code> 时，允许使用 <code>== null</code>。</h5>
        <p>解释：</p>
        <p>使用 <code>===</code> 可以避免等于判断中隐式的类型转换。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (age <span class="pl-k">===</span> <span class="pl-c1">30</span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (age <span class="pl-k">==</span> <span class="pl-c1">30</span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h5><a href="#建议-尽可能使用简洁的表达式" aria-hidden="true" class="anchor" id="user-content-建议-尽可能使用简洁的表达式"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 尽可能使用简洁的表达式。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 字符串为空</span>

<span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (<span class="pl-k">!</span>name) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (name <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 字符串非空</span>

<span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (name) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (name <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 数组非空</span>

<span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (<span class="pl-smi">collection</span>.<span class="pl-c1">length</span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (<span class="pl-smi">collection</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 布尔不成立</span>

<span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (<span class="pl-k">!</span>notTrue) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (notTrue <span class="pl-k">===</span> <span class="pl-c1">false</span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> null 或 undefined</span>

<span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">if</span> (noValue <span class="pl-k">==</span> <span class="pl-c1">null</span>) {
  <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">if</span> (noValue <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> <span class="pl-k">typeof</span> noValue <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>undefined<span class="pl-pds">'</span></span>) {
  <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h5><a href="#建议-按执行频率排列分支的顺序" aria-hidden="true" class="anchor" id="user-content-建议-按执行频率排列分支的顺序"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 按执行频率排列分支的顺序。</h5>
        <p>解释：</p>
        <p>按执行频率排列分支的顺序好处是：</p>
        <ol>
            <li>阅读的人容易找到最常见的情况，增加可读性。</li>
            <li>提高执行效率。</li>
        </ol>
        <h5><a href="#建议-对于相同变量或表达式的多值条件用-switch-代替-if" aria-hidden="true" class="anchor" id="user-content-建议-对于相同变量或表达式的多值条件用-switch-代替-if"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">switch</span> (<span class="pl-k">typeof</span> variable) {
    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>object<span class="pl-pds">'</span></span>:
        <span class="pl-c"><span class="pl-c">//</span> ......</span>
        <span class="pl-k">break</span>;
    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>number<span class="pl-pds">'</span></span>:
    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>boolean<span class="pl-pds">'</span></span>:
    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">'</span>string<span class="pl-pds">'</span></span>:
        <span class="pl-c"><span class="pl-c">//</span> ......</span>
        <span class="pl-k">break</span>;
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> type <span class="pl-k">=</span> <span class="pl-k">typeof</span> variable;
<span class="pl-k">if</span> (type <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>object<span class="pl-pds">'</span></span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}
<span class="pl-k">else</span> <span class="pl-k">if</span> (type <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>number<span class="pl-pds">'</span></span> <span class="pl-k">||</span> type <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>boolean<span class="pl-pds">'</span></span> <span class="pl-k">||</span> type <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>string<span class="pl-pds">'</span></span>) {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h5><a href="#建议-如果函数或全局中的-else-块后没有任何语句可以删除-else" aria-hidden="true" class="anchor" id="user-content-建议-如果函数或全局中的-else-块后没有任何语句可以删除-else"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">function</span> <span class="pl-en">getName</span>() {
    <span class="pl-k">if</span> (name) {
        <span class="pl-k">return</span> name;
    }

    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">'</span>unnamed<span class="pl-pds">'</span></span>;
}

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">function</span> <span class="pl-en">getName</span>() {
    <span class="pl-k">if</span> (name) {
        <span class="pl-k">return</span> name;
    }
    <span class="pl-k">else</span> {
        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">'</span>unnamed<span class="pl-pds">'</span></span>;
    }
}</pre></div>
        <h3><a href="#33-循环" aria-hidden="true" class="anchor" id="user-content-33-循环"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.3 循环</h3>
        <h5><a href="#建议-不要在循环体中包含函数表达式事先将函数提取到循环体外" aria-hidden="true" class="anchor" id="user-content-建议-不要在循环体中包含函数表达式事先将函数提取到循环体外"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5>
        <p>解释：</p>
        <p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">function</span> <span class="pl-en">clicker</span>() {
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}

<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[i];
    <span class="pl-en">addListener</span>(element, <span class="pl-s"><span class="pl-pds">'</span>click<span class="pl-pds">'</span></span>, clicker);
}


<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[i];
    <span class="pl-en">addListener</span>(element, <span class="pl-s"><span class="pl-pds">'</span>click<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {});
}</pre></div>
        <h5><a href="#建议-对循环内多次使用的不变值在循环外用变量缓存" aria-hidden="true" class="anchor" id="user-content-建议-对循环内多次使用的不变值在循环外用变量缓存"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> width <span class="pl-k">=</span> <span class="pl-smi">wrap</span>.<span class="pl-smi">offsetWidth</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>px<span class="pl-pds">'</span></span>;
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[i];
    <span class="pl-smi">element</span>.<span class="pl-c1">style</span>.<span class="pl-c1">width</span> <span class="pl-k">=</span> width;
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}


<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[i];
    <span class="pl-smi">element</span>.<span class="pl-c1">style</span>.<span class="pl-c1">width</span> <span class="pl-k">=</span> <span class="pl-smi">wrap</span>.<span class="pl-smi">offsetWidth</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>px<span class="pl-pds">'</span></span>;
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h5><a href="#建议-对有序集合进行遍历时缓存-length" aria-hidden="true" class="anchor" id="user-content-建议-对有序集合进行遍历时缓存-length"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5>
        <p>解释：</p>
        <p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 <code>length</code> 访问时会动态计算元素个数，此时缓存 <code>length</code> 能有效提高程序性能。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[i];
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h5><a href="#建议-对有序集合进行顺序无关的遍历时使用逆序遍历" aria-hidden="true" class="anchor" id="user-content-建议-对有序集合进行顺序无关的遍历时使用逆序遍历"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5>
        <p>解释：</p>
        <p>逆序遍历可以节省变量，代码比较优化。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-smi">elements</span>.<span class="pl-c1">length</span>;
<span class="pl-k">while</span> (len<span class="pl-k">--</span>) {
    <span class="pl-k">var</span> element <span class="pl-k">=</span> elements[len];
    <span class="pl-c"><span class="pl-c">//</span> ......</span>
}</pre></div>
        <h3><a href="#34-类型" aria-hidden="true" class="anchor" id="user-content-34-类型"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.4 类型</h3>
        <h4><a href="#341-类型检测" aria-hidden="true" class="anchor" id="user-content-341-类型检测"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.4.1 类型检测</h4>
        <h5><a href="#建议-类型检测优先使用-typeof对象类型检测使用-instanceofnull-或-undefined-的检测使用--null" aria-hidden="true" class="anchor" id="user-content-建议-类型检测优先使用-typeof对象类型检测使用-instanceofnull-或-undefined-的检测使用--null"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> string</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>string<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">//</span> number</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>number<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">//</span> boolean</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>boolean<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">//</span> Function</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>function<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">//</span> Object</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>object<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">//</span> RegExp</span>
variable <span class="pl-k">instanceof</span> <span class="pl-c1">RegExp</span>

<span class="pl-c"><span class="pl-c">//</span> Array</span>
variable <span class="pl-k">instanceof</span> <span class="pl-c1">Array</span>

<span class="pl-c"><span class="pl-c">//</span> null</span>
variable <span class="pl-k">===</span> <span class="pl-c1">null</span>

<span class="pl-c"><span class="pl-c">//</span> null or undefined</span>
variable <span class="pl-k">==</span> <span class="pl-c1">null</span>

<span class="pl-c"><span class="pl-c">//</span> undefined</span>
<span class="pl-k">typeof</span> variable <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>undefined<span class="pl-pds">'</span></span></pre></div>
        <h4><a href="#342-类型转换" aria-hidden="true" class="anchor" id="user-content-342-类型转换"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.4.2 类型转换</h4>
        <h5><a href="#建议-转换成-string-时使用--" aria-hidden="true" class="anchor" id="user-content-建议-转换成-string-时使用--"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ ''</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
num <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">new</span> <span class="pl-en">String</span>(num);
<span class="pl-smi">num</span>.<span class="pl-c1">toString</span>();
<span class="pl-c1">String</span>(num);</pre></div>
        <h5><a href="#建议-转换成-number-时通常使用-" aria-hidden="true" class="anchor" id="user-content-建议-转换成-number-时通常使用-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">+</span>str;

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-c1">Number</span>(str);</pre></div>
        <h5><a href="#建议-string-转换成-number要转换的字符串结尾包含非数字并期望忽略时使用-parseint" aria-hidden="true" class="anchor" id="user-content-建议-string-转换成-number要转换的字符串结尾包含非数字并期望忽略时使用-parseint"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> width <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>200px<span class="pl-pds">'</span></span>;
<span class="pl-c1">parseInt</span>(width, <span class="pl-c1">10</span>);</pre></div>
        <h5><a href="#强制-使用-parseint-时必须指定进制" aria-hidden="true" class="anchor" id="user-content-强制-使用-parseint-时必须指定进制"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-c1">parseInt</span>(str, <span class="pl-c1">10</span>);

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-c1">parseInt</span>(str);</pre></div>
        <h5><a href="#建议-转换成-boolean-时使用-" aria-hidden="true" class="anchor" id="user-content-建议-转换成-boolean-时使用-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">3.14</span>;
<span class="pl-k">!!</span>num;</pre></div>
        <h5><a href="#建议-number-去除小数点使用-mathfloor--mathround--mathceil不使用-parseint" aria-hidden="true" class="anchor" id="user-content-建议-number-去除小数点使用-mathfloor--mathround--mathceil不使用-parseint"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor</code> / <code>Math.round</code> / <code>Math.ceil</code>，不使用 <code>parseInt</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">3.14</span>;
<span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(num);

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">3.14</span>;
<span class="pl-c1">parseInt</span>(num, <span class="pl-c1">10</span>);</pre></div>
        <h3><a href="#35-字符串" aria-hidden="true" class="anchor" id="user-content-35-字符串"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.5 字符串</h3>
        <h5><a href="#强制-字符串开头和结束使用单引号-" aria-hidden="true" class="anchor" id="user-content-强制-字符串开头和结束使用单引号-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 字符串开头和结束使用单引号 <code>'</code>。</h5>
        <p>解释：</p>
        <ol>
            <li>输入单引号不需要按住 <code>shift</code>，方便输入。</li>
            <li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li>
        </ol>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>我是一个字符串<span class="pl-pds">'</span></span>;
<span class="pl-k">var</span> html <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;<span class="pl-pds">'</span></span>;</pre></div>
        <h5><a href="#建议-使用-数组-或--拼接字符串" aria-hidden="true" class="anchor" id="user-content-建议-使用-数组-或--拼接字符串"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5>
        <p>解释：</p>
        <ol>
            <li>使用 <code>+</code> 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 <code>+</code> 拼接。</li>
            <li>在现代浏览器下，使用 <code>+</code> 拼接字符串，性能较数组的方式要高。</li>
            <li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li>
        </ol>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 使用数组拼接字符串</span>
<span class="pl-k">var</span> str <span class="pl-k">=</span> [
    <span class="pl-c"><span class="pl-c">//</span> 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span>
    <span class="pl-s"><span class="pl-pds">'</span>&lt;ul&gt;<span class="pl-pds">'</span></span>,
        <span class="pl-s"><span class="pl-pds">'</span>&lt;li&gt;第一项&lt;/li&gt;<span class="pl-pds">'</span></span>,
        <span class="pl-s"><span class="pl-pds">'</span>&lt;li&gt;第二项&lt;/li&gt;<span class="pl-pds">'</span></span>,
    <span class="pl-s"><span class="pl-pds">'</span>&lt;/ul&gt;<span class="pl-pds">'</span></span>
].<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>);

<span class="pl-c"><span class="pl-c">//</span> 使用 `+` 拼接字符串</span>
<span class="pl-k">var</span> str2 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span> <span class="pl-c"><span class="pl-c">//</span> 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span>
    <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;ul&gt;<span class="pl-pds">'</span></span>,
    <span class="pl-k">+</span>    <span class="pl-s"><span class="pl-pds">'</span>&lt;li&gt;第一项&lt;/li&gt;<span class="pl-pds">'</span></span>,
    <span class="pl-k">+</span>    <span class="pl-s"><span class="pl-pds">'</span>&lt;li&gt;第二项&lt;/li&gt;<span class="pl-pds">'</span></span>,
    <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;/ul&gt;<span class="pl-pds">'</span></span>;</pre></div>
        <h5><a href="#建议-使用字符串拼接的方式生成html需要根据语境进行合理的转义" aria-hidden="true" class="anchor" id="user-content-建议-使用字符串拼接的方式生成html需要根据语境进行合理的转义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。</h5>
        <p>解释：</p>
        <p>在 <code>JavaScript</code> 中拼接，并且最终将输出到页面中的字符串，需要进行合理转义，以防止安全漏洞。下面的示例代码为场景说明，不能直接运行。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> HTML 转义</span>
<span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;p&gt;<span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-en">htmlEncode</span>(content) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;/p&gt;<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> HTML 转义</span>
<span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;input type="text" value="<span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-en">htmlEncode</span>(value) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>"&gt;<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> URL 转义</span>
<span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;a href="/?key=<span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-en">htmlEncode</span>(<span class="pl-en">urlEncode</span>(value)) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>"&gt;link&lt;/a&gt;<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> JavaScript字符串 转义 + HTML 转义</span>
<span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>&lt;button onclick="check(<span class="pl-cce">\'</span><span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-en">htmlEncode</span>(<span class="pl-en">strLiteral</span>(name)) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\'</span>)"&gt;提交&lt;/button&gt;<span class="pl-pds">'</span></span>;</pre></div>
        <h5><a href="#建议-复杂的数据到视图字符串的转换过程选用一种模板引擎" aria-hidden="true" class="anchor" id="user-content-建议-复杂的数据到视图字符串的转换过程选用一种模板引擎"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5>
        <p>解释：</p>
        <p>使用模板引擎有如下好处：</p>
        <ol>
            <li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li>
            <li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li>
            <li>模板引擎能方便的对动态数据进行相应的转义，部分模板引擎默认进行HTML转义，安全性更好。</li>
        </ol>
        <ul>
            <li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li>
            <li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li>
            <li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li>
            <li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li>
            <li>hogon: 体积小，在现代浏览器下性能高。</li>
            <li>nunjucks: 体积较大，性能一般，模板复用性高。</li>
        </ul>
        <h3><a href="#36-对象" aria-hidden="true" class="anchor" id="user-content-36-对象"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.6 对象</h3>
        <h5><a href="#强制-使用对象字面量--创建新-object" aria-hidden="true" class="anchor" id="user-content-强制-使用对象字面量--创建新-object"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> {};

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> obj <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Object</span>();</pre></div>
        <h5><a href="#建议-对象创建时如果一个对象的所有-属性-均可以不添加引号建议所有-属性-不添加引号" aria-hidden="true" class="anchor" id="user-content-建议-对象创建时如果一个对象的所有-属性-均可以不添加引号建议所有-属性-不添加引号"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，建议所有 <code>属性</code> 不添加引号。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> info <span class="pl-k">=</span> {
    name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>someone<span class="pl-pds">'</span></span>,
    age<span class="pl-k">:</span> <span class="pl-c1">28</span>
};</pre></div>
        <h5><a href="#建议-对象创建时如果任何一个-属性-需要添加引号则所有-属性-建议添加-" aria-hidden="true" class="anchor" id="user-content-建议-对象创建时如果任何一个-属性-需要添加引号则所有-属性-建议添加-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 建议添加 <code>'</code>。</h5>
        <p>解释：</p>
        <p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> info <span class="pl-k">=</span> {
    <span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>someone<span class="pl-pds">'</span></span>,
    <span class="pl-s"><span class="pl-pds">'</span>age<span class="pl-pds">'</span></span><span class="pl-k">:</span> <span class="pl-c1">28</span>,
    <span class="pl-s"><span class="pl-pds">'</span>more-info<span class="pl-pds">'</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>...<span class="pl-pds">'</span></span>
};

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> info <span class="pl-k">=</span> {
    name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>someone<span class="pl-pds">'</span></span>,
    age<span class="pl-k">:</span> <span class="pl-c1">28</span>,
    <span class="pl-s"><span class="pl-pds">'</span>more-info<span class="pl-pds">'</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>...<span class="pl-pds">'</span></span>
};</pre></div>
        <h5><a href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型" aria-hidden="true" class="anchor" id="user-content-强制-不允许修改和扩展任何原生对象和宿主对象的原型"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 以下行为绝对禁止</span>
<span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">trim</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
};</pre></div>
        <h5><a href="#建议-属性访问时尽量使用-" aria-hidden="true" class="anchor" id="user-content-建议-属性访问时尽量使用-"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5>
        <p>解释：</p>
        <p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p>
        <p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性（比如来自后端的 JSON ），可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-smi">info</span>.<span class="pl-smi">age</span>;
info[<span class="pl-s"><span class="pl-pds">'</span>more-info<span class="pl-pds">'</span></span>];</pre></div>
        <h5><a href="#建议-for-in-遍历对象时-使用-hasownproperty-过滤掉原型中的属性" aria-hidden="true" class="anchor" id="user-content-建议-for-in-遍历对象时-使用-hasownproperty-过滤掉原型中的属性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> newInfo <span class="pl-k">=</span> {};
<span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> info) {
    <span class="pl-k">if</span> (<span class="pl-smi">info</span>.<span class="pl-en">hasOwnProperty</span>(key)) {
        newInfo[key] <span class="pl-k">=</span> info[key];
    }
}</pre></div>
        <h3><a href="#37-数组" aria-hidden="true" class="anchor" id="user-content-37-数组"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.7 数组</h3>
        <h5><a href="#强制-使用数组字面量--创建新数组除非想要创建的是指定长度的数组" aria-hidden="true" class="anchor" id="user-content-强制-使用数组字面量--创建新数组除非想要创建的是指定长度的数组"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-k">var</span> arr <span class="pl-k">=</span> [];

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> arr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Array</span>();</pre></div>
        <h5><a href="#强制-遍历数组不使用-for-in" aria-hidden="true" class="anchor" id="user-content-强制-遍历数组不使用-for-in"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 遍历数组不使用 <code>for in</code>。</h5>
        <p>解释：</p>
        <p>数组对象可能存在数字以外的属性, 这种情况下 <code>for in</code> 不会得到正确结果。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> arr <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span>];

<span class="pl-c"><span class="pl-c">//</span> 这里仅作演示, 实际中应使用 Object 类型</span>
<span class="pl-smi">arr</span>.<span class="pl-smi">other</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>other things<span class="pl-pds">'</span></span>;

<span class="pl-c"><span class="pl-c">//</span> 正确的遍历方式</span>
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">arr</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(i);
}

<span class="pl-c"><span class="pl-c">//</span> 错误的遍历方式</span>
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">in</span> arr) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(i);
}</pre></div>
        <h5><a href="#建议-不因为性能的原因自己实现数组排序功能尽量使用数组的-sort-方法" aria-hidden="true" class="anchor" id="user-content-建议-不因为性能的原因自己实现数组排序功能尽量使用数组的-sort-方法"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5>
        <p>解释：</p>
        <p>自己实现的常规排序算法，在性能上并不优于数组默认的 <code>sort</code> 方法。以下两种场景可以自己实现排序：</p>
        <ol>
            <li>需要稳定的排序算法，达到严格一致的排序结果。</li>
            <li>数据特点鲜明，适合使用桶排。</li>
        </ol>
        <h5><a href="#建议-清空数组使用-length--0" aria-hidden="true" class="anchor" id="user-content-建议-清空数组使用-length--0"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5>
        <h3><a href="#38-函数" aria-hidden="true" class="anchor" id="user-content-38-函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.8 函数</h3>
        <h4><a href="#381-函数长度" aria-hidden="true" class="anchor" id="user-content-381-函数长度"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.8.1 函数长度</h4>
        <h5><a href="#建议-一个函数的长度控制在-50-行以内" aria-hidden="true" class="anchor" id="user-content-建议-一个函数的长度控制在-50-行以内"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5>
        <p>解释：</p>
        <p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>
        <p>特定算法等不可分割的逻辑允许例外。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">syncViewStateOnUserAction</span>() {
    <span class="pl-k">if</span> (<span class="pl-smi">x</span>.<span class="pl-c1">checked</span>) {
        <span class="pl-smi">y</span>.<span class="pl-c1">checked</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;
        <span class="pl-smi">z</span>.<span class="pl-c1">value</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;
    }
    <span class="pl-k">else</span> {
        <span class="pl-smi">y</span>.<span class="pl-c1">checked</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
    }

    <span class="pl-k">if</span> (<span class="pl-smi">a</span>.<span class="pl-c1">value</span>) {
        <span class="pl-smi">warning</span>.<span class="pl-smi">innerText</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;
        <span class="pl-smi">submitButton</span>.<span class="pl-c1">disabled</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;
    }
    <span class="pl-k">else</span> {
        <span class="pl-smi">warning</span>.<span class="pl-smi">innerText</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Please enter it<span class="pl-pds">'</span></span>;
        <span class="pl-smi">submitButton</span>.<span class="pl-c1">disabled</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;
    }
}

<span class="pl-c"><span class="pl-c">//</span> 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span>

<span class="pl-k">function</span> <span class="pl-en">syncViewStateOnUserAction</span>() {
    <span class="pl-en">syncXStateToView</span>();
    <span class="pl-en">checkAAvailability</span>();
}

<span class="pl-k">function</span> <span class="pl-en">syncXStateToView</span>() {
    <span class="pl-smi">y</span>.<span class="pl-c1">checked</span> <span class="pl-k">=</span> <span class="pl-smi">x</span>.<span class="pl-c1">checked</span>;

    <span class="pl-k">if</span> (<span class="pl-smi">x</span>.<span class="pl-c1">checked</span>) {
        <span class="pl-smi">z</span>.<span class="pl-c1">value</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>;
    }
}

<span class="pl-k">function</span> <span class="pl-en">checkAAvailability</span>() {
    <span class="pl-k">if</span> (<span class="pl-smi">a</span>.<span class="pl-c1">value</span>) {
        <span class="pl-en">clearWarnignForA</span>();
    }
    <span class="pl-k">else</span> {
        <span class="pl-en">displayWarningForAMissing</span>();
    }
}</pre></div>
        <h4><a href="#382-参数设计" aria-hidden="true" class="anchor" id="user-content-382-参数设计"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.8.2 参数设计</h4>
        <h5><a href="#建议-一个函数的参数控制在-6-个以内" aria-hidden="true" class="anchor" id="user-content-建议-一个函数的参数控制在-6-个以内"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5>
        <p>解释：</p>
        <p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 <code>6</code> 个以内，过多参数会导致维护难度增大。</p>
        <p>某些情况下，如使用 AMD Loader 的 <code>require</code> 加载多个模块时，其 <code>callback</code> 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p>
        <h5><a href="#建议-通过-options-参数传递非数据输入型参数" aria-hidden="true" class="anchor" id="user-content-建议-通过-options-参数传递非数据输入型参数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5>
        <p>解释：</p>
        <p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 <code>options</code> 参数传递。</p>
        <p>如下函数：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 移除某个元素</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Node}</span> <span class="pl-smi">element</span> 需要移除的元素</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{boolean}</span> <span class="pl-smi">removeEventListeners</span> 是否同时将所有注册在元素上的事件移除</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">removeElement</span>(<span class="pl-smi">element</span>, <span class="pl-smi">removeEventListeners</span>) {
    <span class="pl-smi">element</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">removeChild</span>(element);

    <span class="pl-k">if</span> (removeEventListeners) {
        <span class="pl-smi">element</span>.<span class="pl-en">clearEventListeners</span>();
    }
}</pre></div>
        <p>可以转换为下面的签名：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 移除某个元素</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Node}</span> <span class="pl-smi">element</span> 需要移除的元素</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Object}</span> <span class="pl-smi">options</span> 相关的逻辑配置</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{boolean}</span> <span class="pl-smi">options.removeEventListeners</span> 是否同时将所有注册在元素上的事件移除</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">removeElement</span>(<span class="pl-smi">element</span>, <span class="pl-smi">options</span>) {
    <span class="pl-smi">element</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">removeChild</span>(element);

    <span class="pl-k">if</span> (<span class="pl-smi">options</span>.<span class="pl-smi">removeEventListeners</span>) {
        <span class="pl-smi">element</span>.<span class="pl-en">clearEventListeners</span>();
    }
}</pre></div>
        <p>这种模式有几个显著的优势：</p>
        <ul>
            <li><code>boolean</code> 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li>
            <li>当配置项有增长时，无需无休止地增加参数个数，不会出现 <code>removeElement(element, true, false, false, 3)</code> 这样难以理解的调用代码。</li>
            <li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li>
        </ul>
        <h4><a href="#383-闭包" aria-hidden="true" class="anchor" id="user-content-383-闭包"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.8.3 闭包</h4>
        <h5><a href="#建议-在适当的时候将闭包内大对象置为-null" aria-hidden="true" class="anchor" id="user-content-建议-在适当的时候将闭包内大对象置为-null"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5>
        <p>解释：</p>
        <p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>
        <p>闭包会阻止一些变量的垃圾回收，对于较老旧的 JavaScript 引擎，可能导致外部所有变量均无法回收。</p>
        <p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>
        <ul>
            <li>嵌套的函数中是否有使用该变量。</li>
            <li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li>
            <li>是否使用了 with 表达式。</li>
        </ul>
        <p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>
        <p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 <strong>fn</strong> 时：</p>
        <ol>
            <li>如果 <strong>fn</strong> 的 <code>[[Scope]]</code> 是 ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：
                <ol>
                    <li>如果是 V8 引擎，则退出全过程。</li>
                    <li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>
                </ol>
            </li>
            <li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：
                <ol>
                    <li>如果 FunctionBody 中含有 <strong>直接调用 eval</strong>，则退出全过程。</li>
                    <li>否则得到所有的 Identifier。</li>
                    <li>对于每一个 Identifier，设其为 <strong>name</strong>，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 <strong>name</strong> 的绑定 binding。</li>
                    <li>对 binding 添加 <strong>notSwap</strong> 属性，其值为 <code>true</code>。</li>
                </ol>
            </li>
            <li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 <strong>notSwap</strong> 属性且值为 <code>true</code>，则：
                <ol>
                    <li>如果是 V8 引擎，删除该绑定。</li>
                    <li>如果是 SpiderMonkey，将该绑定的值设为 <code>undefined</code>，将删除 <strong>notSwap</strong> 属性。</li>
                </ol>
            </li>
        </ol>
        <p>对于 Chakra 引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p>
        <p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>
        <h5><a href="#建议-使用-iife-避免-lift-效应" aria-hidden="true" class="anchor" id="user-content-建议-使用-iife-避免-lift-效应"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5>
        <p>解释：</p>
        <p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> tasks <span class="pl-k">=</span> [];
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">5</span>; i<span class="pl-k">++</span>) {
    tasks[<span class="pl-smi">tasks</span>.<span class="pl-c1">length</span>] <span class="pl-k">=</span> <span class="pl-k">function</span> () {
        <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Current cursor is at <span class="pl-pds">'</span></span> <span class="pl-k">+</span> i);
    };
}

<span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-smi">tasks</span>.<span class="pl-c1">length</span>;
<span class="pl-k">while</span> (len<span class="pl-k">--</span>) {
    tasks[len]();
}</pre></div>
        <p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p>
        <p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> tasks <span class="pl-k">=</span> [];
<span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">5</span>; i<span class="pl-k">++</span>) {
    <span class="pl-c"><span class="pl-c">//</span> 注意有一层额外的闭包</span>
    tasks[<span class="pl-smi">tasks</span>.<span class="pl-c1">length</span>] <span class="pl-k">=</span> (<span class="pl-k">function</span> (<span class="pl-smi">i</span>) {
        <span class="pl-k">return</span> <span class="pl-k">function</span> () {
            <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Current cursor is at <span class="pl-pds">'</span></span> <span class="pl-k">+</span> i);
        };
    })(i);
}

<span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-smi">tasks</span>.<span class="pl-c1">length</span>;
<span class="pl-k">while</span> (len<span class="pl-k">--</span>) {
    tasks[len]();
}</pre></div>
        <h4><a href="#384-空函数" aria-hidden="true" class="anchor" id="user-content-384-空函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.8.4 空函数</h4>
        <h5><a href="#建议-空函数不使用-new-function-的形式" aria-hidden="true" class="anchor" id="user-content-建议-空函数不使用-new-function-的形式"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> <span class="pl-en">emptyFunction</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {};</pre></div>
        <h5><a href="#建议-对于性能有高要求的场合建议存在一个空函数的常量供多处使用共享" aria-hidden="true" class="anchor" id="user-content-建议-对于性能有高要求的场合建议存在一个空函数的常量供多处使用共享"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> <span class="pl-en">EMPTY_FUNCTION</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {};

<span class="pl-k">function</span> <span class="pl-en">MyClass</span>() {
}

<span class="pl-smi">MyClass</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">abstractMethod</span> <span class="pl-k">=</span> <span class="pl-c1">EMPTY_FUNCTION</span>;
<span class="pl-smi">MyClass</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">hooks</span>.<span class="pl-smi">before</span> <span class="pl-k">=</span> <span class="pl-c1">EMPTY_FUNCTION</span>;
<span class="pl-smi">MyClass</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">hooks</span>.<span class="pl-smi">after</span> <span class="pl-k">=</span> <span class="pl-c1">EMPTY_FUNCTION</span>;</pre></div>
        <h3><a href="#39-面向对象" aria-hidden="true" class="anchor" id="user-content-39-面向对象"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.9 面向对象</h3>
        <h5><a href="#强制-类的继承方案实现时需要修正-constructor" aria-hidden="true" class="anchor" id="user-content-强制-类的继承方案实现时需要修正-constructor"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5>
        <p>解释：</p>
        <p>通常使用其他 library 的类继承方案都会进行 <code>constructor</code> 修正。如果是自己实现的类继承方案，需要进行 <code>constructor</code> 修正。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">/**</span></span>
<span class="pl-c"> * 构建类之间的继承关系</span>
<span class="pl-c"> *</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Function}</span> <span class="pl-smi">subClass</span> 子类函数</span>
<span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Function}</span> <span class="pl-smi">superClass</span> 父类函数</span>
<span class="pl-c"> <span class="pl-c">*/</span></span>
<span class="pl-k">function</span> <span class="pl-en">inherits</span>(<span class="pl-smi">subClass</span>, <span class="pl-smi">superClass</span>) {
    <span class="pl-k">var</span> <span class="pl-c1">F</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Function</span>();
    <span class="pl-c1">F</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-smi">superClass</span>.<span class="pl-c1">prototype</span>;
    <span class="pl-smi">subClass</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">F</span>();
    <span class="pl-smi">subClass</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span> <span class="pl-k">=</span> subClass;
}</pre></div>
        <h5><a href="#建议-声明类时保证-constructor-的正确性" aria-hidden="true" class="anchor" id="user-content-建议-声明类时保证-constructor-的正确性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Animal</span>(<span class="pl-smi">name</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name;
}

<span class="pl-c"><span class="pl-c">//</span> 直接prototype等于对象时，需要修正constructor</span>
<span class="pl-smi">Animal</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> {
    <span class="pl-en">constructor</span>: Animal,

    jump: <span class="pl-k">function</span> () {
        <span class="pl-en">alert</span>(<span class="pl-s"><span class="pl-pds">'</span>animal <span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span> jump<span class="pl-pds">'</span></span>);
    }
};

<span class="pl-c"><span class="pl-c">//</span> 这种方式扩展prototype则无需理会constructor</span>
<span class="pl-smi">Animal</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">jump</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-en">alert</span>(<span class="pl-s"><span class="pl-pds">'</span>animal <span class="pl-pds">'</span></span> <span class="pl-k">+</span> <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span> jump<span class="pl-pds">'</span></span>);
};</pre></div>
        <h5><a href="#建议-属性在构造函数中声明方法在原型中声明" aria-hidden="true" class="anchor" id="user-content-建议-属性在构造函数中声明方法在原型中声明"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5>
        <p>解释：</p>
        <p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">TextNode</span>(<span class="pl-smi">value</span>, <span class="pl-smi">engine</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">value</span> <span class="pl-k">=</span> value;
    <span class="pl-c1">this</span>.<span class="pl-smi">engine</span> <span class="pl-k">=</span> engine;
}

<span class="pl-smi">TextNode</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">clone</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {
    <span class="pl-k">return</span> <span class="pl-c1">this</span>;
};</pre></div>
        <h5><a href="#强制-自定义事件的-事件名-必须全小写" aria-hidden="true" class="anchor" id="user-content-强制-自定义事件的-事件名-必须全小写"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5>
        <p>解释：</p>
        <p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p>
        <h5><a href="#强制-自定义事件只能有一个-event-参数如果事件需要传递较多信息应仔细设计事件对象" aria-hidden="true" class="anchor" id="user-content-强制-自定义事件只能有一个-event-参数如果事件需要传递较多信息应仔细设计事件对象"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5>
        <p>解释：</p>
        <p>一个事件对象的好处有：</p>
        <ol>
            <li>顺序无关，避免事件监听者需要记忆参数顺序。</li>
            <li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>
            <li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li>
        </ol>
        <h5><a href="#建议-设计自定义事件时应考虑禁止默认行为" aria-hidden="true" class="anchor" id="user-content-建议-设计自定义事件时应考虑禁止默认行为"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5>
        <p>解释：</p>
        <p>常见禁止默认行为的方式有两种：</p>
        <ol>
            <li>事件监听函数中 <code>return false</code>。</li>
            <li>事件对象中包含禁止默认行为的方法，如 <code>preventDefault</code>。</li>
        </ol>
        <h3><a href="#310-动态特性" aria-hidden="true" class="anchor" id="user-content-310-动态特性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10 动态特性</h3>
        <h4><a href="#3101-eval" aria-hidden="true" class="anchor" id="user-content-3101-eval"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10.1 eval</h4>
        <h5><a href="#强制-避免使用直接-eval-函数" aria-hidden="true" class="anchor" id="user-content-强制-避免使用直接-eval-函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 避免使用直接 <code>eval</code> 函数。</h5>
        <p>解释：</p>
        <p>直接 <code>eval</code>，指的是以函数方式调用 <code>eval</code> 的调用方法。直接 <code>eval</code> 调用执行代码的作用域为本地作用域，应当避免。</p>
        <p>如果有特殊情况需要使用直接 <code>eval</code>，需在代码中用详细的注释说明为何必须使用直接 <code>eval</code>，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p>
        <h5><a href="#建议-尽量避免使用-eval-函数" aria-hidden="true" class="anchor" id="user-content-建议-尽量避免使用-eval-函数"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5>
        <h4><a href="#3102-动态执行代码" aria-hidden="true" class="anchor" id="user-content-3102-动态执行代码"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10.2 动态执行代码</h4>
        <h5><a href="#建议-使用-new-function-执行动态代码" aria-hidden="true" class="anchor" id="user-content-建议-使用-new-function-执行动态代码"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5>
        <p>解释：</p>
        <p>通过 <code>new Function</code> 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 <code>new Function</code>。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> handler <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Function</span>(<span class="pl-s"><span class="pl-pds">'</span>x<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>y<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>return x + y;<span class="pl-pds">'</span></span>);
<span class="pl-k">var</span> result <span class="pl-k">=</span> <span class="pl-en">handler</span>(<span class="pl-en">$</span>(<span class="pl-s"><span class="pl-pds">'</span>#x<span class="pl-pds">'</span></span>).<span class="pl-en">val</span>(), <span class="pl-en">$</span>(<span class="pl-s"><span class="pl-pds">'</span>#y<span class="pl-pds">'</span></span>).<span class="pl-en">val</span>());</pre></div>
        <h4><a href="#3103-with" aria-hidden="true" class="anchor" id="user-content-3103-with"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10.3 with</h4>
        <h5><a href="#建议-尽量不要使用-with" aria-hidden="true" class="anchor" id="user-content-建议-尽量不要使用-with"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 尽量不要使用 <code>with</code>。</h5>
        <p>解释：</p>
        <p>使用 <code>with</code> 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 <code>with</code> 的场景都能使用其他方式较好的替代。所以，尽量不要使用 <code>with</code>。</p>
        <h4><a href="#3104-delete" aria-hidden="true" class="anchor" id="user-content-3104-delete"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10.4 delete</h4>
        <h5><a href="#建议-减少-delete-的使用" aria-hidden="true" class="anchor" id="user-content-建议-减少-delete-的使用"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 减少 <code>delete</code> 的使用。</h5>
        <p>解释：</p>
        <p>如果没有特别的需求，减少或避免使用 <code>delete</code>。<code>delete</code> 的使用会破坏部分 JavaScript 引擎的性能优化。</p>
        <h5><a href="#建议-处理-delete-可能产生的异常" aria-hidden="true" class="anchor" id="user-content-建议-处理-delete-可能产生的异常"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5>
        <p>解释：</p>
        <p>对于有被遍历需求，且值 <code>null</code> 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 <code>delete</code> 操作。</p>
        <p>在严格模式或 IE 下使用 <code>delete</code> 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 <code>try-catch</code> 块。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">try</span> {
    <span class="pl-k">delete</span> <span class="pl-smi">o</span>.<span class="pl-c1">x</span>;
}
<span class="pl-k">catch</span> (deleteError) {
    <span class="pl-smi">o</span>.<span class="pl-c1">x</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;
}</pre></div>
        <h4><a href="#3105-对象属性" aria-hidden="true" class="anchor" id="user-content-3105-对象属性"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.10.5 对象属性</h4>
        <h5><a href="#建议-避免修改外部传入的对象" aria-hidden="true" class="anchor" id="user-content-建议-避免修改外部传入的对象"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 避免修改外部传入的对象。</h5>
        <p>解释：</p>
        <p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p>
        <p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p>
        <p>下面代码的 <strong>selectNode</strong> 方法修改了由外部传入的 <strong>datasource</strong> 对象。如果 <strong>datasource</strong> 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Tree</span>(<span class="pl-smi">datasource</span>) {
    <span class="pl-c1">this</span>.<span class="pl-smi">datasource</span> <span class="pl-k">=</span> datasource;
}

<span class="pl-smi">Tree</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">selectNode</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">id</span>) {
    <span class="pl-c"><span class="pl-c">//</span> 从datasource中找出节点对象</span>
    <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-en">findNode</span>(id);
    <span class="pl-k">if</span> (node) {
        <span class="pl-smi">node</span>.<span class="pl-c1">selected</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;
        <span class="pl-c1">this</span>.<span class="pl-en">flushView</span>();
    }
};</pre></div>
        <p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 <strong>selectedNodeIndex</strong> 对象来维护节点的选中状态，不对 <strong>datasource</strong> 作任何修改。</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Tree</span>(<span class="pl-smi">datasource</span>) {
    <span class="pl-c1">this</span>.<span class="pl-smi">datasource</span> <span class="pl-k">=</span> datasource;
    <span class="pl-c1">this</span>.<span class="pl-smi">selectedNodeIndex</span> <span class="pl-k">=</span> {};
}

<span class="pl-smi">Tree</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">selectNode</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">id</span>) {

    <span class="pl-c"><span class="pl-c">//</span> 从datasource中找出节点对象</span>
    <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-en">findNode</span>(id);

    <span class="pl-k">if</span> (node) {
        <span class="pl-c1">this</span>.<span class="pl-smi">selectedNodeIndex</span>[id] <span class="pl-k">=</span> <span class="pl-c1">true</span>;
        <span class="pl-c1">this</span>.<span class="pl-en">flushView</span>();
    }

};</pre></div>
        <p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p>
        <h5><a href="#建议-具备强类型的设计" aria-hidden="true" class="anchor" id="user-content-建议-具备强类型的设计"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 具备强类型的设计。</h5>
        <p>解释：</p>
        <ul>
            <li>如果一个属性被设计为 <code>boolean</code> 类型，则不要使用 <code>1</code> 或 <code>0</code> 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 <code>number</code> 类型且将 <code>0</code> 作为否定值。</li>
            <li>从 DOM 中取出的值通常为 <code>string</code> 类型，如果有对象或函数的接收类型为 <code>number</code> 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li>
        </ul>
        <h2><a href="#4-浏览器环境" aria-hidden="true" class="anchor" id="user-content-4-浏览器环境"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4 浏览器环境</h2>
        <h3><a href="#41-模块化" aria-hidden="true" class="anchor" id="user-content-41-模块化"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.1 模块化</h3>
        <h4><a href="#411-amd" aria-hidden="true" class="anchor" id="user-content-411-amd"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.1.1 AMD</h4>
        <h5><a href="#强制-使用-amd-作为模块定义" aria-hidden="true" class="anchor" id="user-content-强制-使用-amd-作为模块定义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 使用 <code>AMD</code> 作为模块定义。</h5>
        <p>解释：</p>
        <p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>
        <p>目前，比较成熟的 AMD Loader 有：</p>
        <ul>
            <li>官方实现的 <a href="http://requirejs.org/" rel="nofollow">requirejs</a></li>
            <li>百度自己实现的 <a href="https://github.com/ecomfe/esl">esl</a></li>
        </ul>
        <h5><a href="#强制-模块-id-必须符合标准" aria-hidden="true" class="anchor" id="user-content-强制-模块-id-必须符合标准"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 模块 <code>id</code> 必须符合标准。</h5>
        <p>解释：</p>
        <p>模块 id 必须符合以下约束条件：</p>
        <ol>
            <li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li>
            <li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>
            <li>不应该有 .js 后缀。</li>
            <li>跟文件的路径保持一致。</li>
        </ol>
        <h4><a href="#412-define" aria-hidden="true" class="anchor" id="user-content-412-define"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.1.2 define</h4>
        <h5><a href="#建议-定义模块时不要指明-id-和-dependencies" aria-hidden="true" class="anchor" id="user-content-建议-定义模块时不要指明-id-和-dependencies"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5>
        <p>解释：</p>
        <p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 <code>local require</code> 引用。</p>
        <p>所以，推荐使用 <code>define(factory)</code> 的形式进行模块定义。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {
    }
);</pre></div>
        <h5><a href="#建议-使用-return-来返回模块定义" aria-hidden="true" class="anchor" id="user-content-建议-使用-return-来返回模块定义"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5>
        <p>解释：</p>
        <p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {
        <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> {};

        <span class="pl-c"><span class="pl-c">//</span> ...</span>

        <span class="pl-k">return</span> <span class="pl-c1">exports</span>;
    }
);</pre></div>
        <h4><a href="#413-require" aria-hidden="true" class="anchor" id="user-content-413-require"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.1.3 require</h4>
        <h5><a href="#强制-全局运行环境中require-必须以-async-require-形式调用" aria-hidden="true" class="anchor" id="user-content-强制-全局运行环境中require-必须以-async-require-形式调用"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5>
        <p>解释：</p>
        <p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> good</span>
<span class="pl-c1">require</span>([<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>], <span class="pl-k">function</span> (<span class="pl-smi">foo</span>) {
});

<span class="pl-c"><span class="pl-c">//</span> bad</span>
<span class="pl-k">var</span> foo <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>);</pre></div>
        <h5><a href="#强制-模块定义中只允许使用-local-require不允许使用-global-require" aria-hidden="true" class="anchor" id="user-content-强制-模块定义中只允许使用-local-require不允许使用-global-require"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5>
        <p>解释：</p>
        <ol>
            <li>在模块定义中使用 <code>global require</code>，对封装性是一种破坏。</li>
            <li>在 AMD 里，<code>global require</code> 是可以被重命名的。并且 Loader 甚至没有全局的 <code>require</code> 变量，而是用 Loader 名称做为 <code>global require</code>。模块定义不应该依赖使用的 Loader。</li>
        </ol>
        <h5><a href="#强制-package-在实现时内部模块的-require-必须使用-relative-id" aria-hidden="true" class="anchor" id="user-content-强制-package-在实现时内部模块的-require-必须使用-relative-id"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] Package 在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5>
        <p>解释：</p>
        <p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，<code>require</code> 自身的其它模块时使用 <code>relative id</code>。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {
        <span class="pl-k">var</span> util <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>./util<span class="pl-pds">'</span></span>);
    }
);</pre></div>
        <h5><a href="#建议-不会被调用的依赖模块在-factory-开始处统一-require" aria-hidden="true" class="anchor" id="user-content-建议-不会被调用的依赖模块在-factory-开始处统一-require"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5>
        <p>解释：</p>
        <p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 <code>css</code> / <code>js</code> / <code>tpl</code> 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>
        <p>示例：</p>
        <div class="highlight highlight-source-js"><pre><span class="pl-en">define</span>(
    <span class="pl-k">function</span> (<span class="pl-smi">require</span>) {
        <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>css!foo.css<span class="pl-pds">'</span></span>);
        <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>tpl!bar.tpl.html<span class="pl-pds">'</span></span>);

        <span class="pl-c"><span class="pl-c">//</span> ...</span>
    }
);</pre></div>
        <h3><a href="#42-dom" aria-hidden="true" class="anchor" id="user-content-42-dom"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2 DOM</h3>
        <h4><a href="#421-元素获取" aria-hidden="true" class="anchor" id="user-content-421-元素获取"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2.1 元素获取</h4>
        <h5><a href="#建议-对于单个元素尽可能使用-documentgetelementbyid-获取避免使用documentall" aria-hidden="true" class="anchor" id="user-content-建议-对于单个元素尽可能使用-documentgetelementbyid-获取避免使用documentall"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5>
        <h5><a href="#建议-对于多个元素的集合尽可能使用-contextgetelementsbytagname-获取其中-context-可以为-document-或其他元素指定-tagname-参数为--可以获得所有子元素" aria-hidden="true" class="anchor" id="user-content-建议-对于多个元素的集合尽可能使用-contextgetelementsbytagname-获取其中-context-可以为-document-或其他元素指定-tagname-参数为--可以获得所有子元素"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5>
        <h5><a href="#建议-遍历元素集合时尽量缓存集合长度如需多次操作同一集合则应将集合转为数组" aria-hidden="true" class="anchor" id="user-content-建议-遍历元素集合时尽量缓存集合长度如需多次操作同一集合则应将集合转为数组"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5>
        <p>解释：</p>
        <p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>
        <p>示例：</p>
        <div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;&lt;/<span class="pl-ent">div</span>&gt;
&lt;<span class="pl-ent">span</span>&gt;&lt;/<span class="pl-ent">span</span>&gt;

&lt;<span class="pl-ent">script</span>&gt;<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">var</span> elements <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-c1">getElementsByTagName</span>(<span class="pl-s"><span class="pl-pds">'</span>*<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> 显示为 DIV</span></span>
<span class="pl-s1"><span class="pl-en">alert</span>(elements[<span class="pl-c1">0</span>].<span class="pl-c1">tagName</span>);</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-k">var</span> div <span class="pl-k">=</span> elements[<span class="pl-c1">0</span>];</span>
<span class="pl-s1"><span class="pl-k">var</span> p <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">'</span>p<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1"><span class="pl-smi">docpment</span>.<span class="pl-c1">body</span>.<span class="pl-c1">insertBefore</span>(p, div);</span>
<span class="pl-s1"></span>
<span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> 显示为 P</span></span>
<span class="pl-s1"><span class="pl-en">alert</span>(elements[<span class="pl-c1">0</span>].<span class="pl-c1">tagName</span>);</span>
<span class="pl-s1"></span><span class="pl-s1">&lt;</span>/<span class="pl-ent">script</span>&gt;</pre></div>
        <h5><a href="#建议-获取元素的直接子元素时使用-children避免使用childnodes除非预期是需要包含文本注释和属性类型的节点" aria-hidden="true" class="anchor" id="user-content-建议-获取元素的直接子元素时使用-children避免使用childnodes除非预期是需要包含文本注释和属性类型的节点"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5>
        <h4><a href="#422-样式获取" aria-hidden="true" class="anchor" id="user-content-422-样式获取"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2.2 样式获取</h4>
        <h5><a href="#建议-获取元素实际样式信息时应使用-getcomputedstyle-或-currentstyle" aria-hidden="true" class="anchor" id="user-content-建议-获取元素实际样式信息时应使用-getcomputedstyle-或-currentstyle"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5>
        <p>解释：</p>
        <p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p>
        <h4><a href="#423-样式设置" aria-hidden="true" class="anchor" id="user-content-423-样式设置"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2.3 样式设置</h4>
        <h5><a href="#建议-尽可能通过为元素添加预定义的-classname-来改变元素样式避免直接操作-style-设置" aria-hidden="true" class="anchor" id="user-content-建议-尽可能通过为元素添加预定义的-classname-来改变元素样式避免直接操作-style-设置"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5>
        <h5><a href="#强制-通过-style-对象设置元素样式时对于带单位非-0-值的属性不允许省略单位" aria-hidden="true" class="anchor" id="user-content-强制-通过-style-对象设置元素样式时对于带单位非-0-值的属性不允许省略单位"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5>
        <p>解释：</p>
        <p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p>
        <h4><a href="#424-dom-操作" aria-hidden="true" class="anchor" id="user-content-424-dom-操作"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2.4 DOM 操作</h4>
        <h5><a href="#建议-操作-dom-时尽量减少页面-reflow" aria-hidden="true" class="anchor" id="user-content-建议-操作-dom-时尽量减少页面-reflow"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5>
        <p>解释：</p>
        <p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p>
        <ul>
            <li>DOM元素的添加、修改（内容）、删除。</li>
            <li>应用新的样式或者修改任何影响元素布局的属性。</li>
            <li>Resize浏览器窗口、滚动页面。</li>
            <li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li>
        </ul>
        <h5><a href="#建议-尽量减少-dom-操作" aria-hidden="true" class="anchor" id="user-content-建议-尽量减少-dom-操作"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5>
        <p>解释：</p>
        <p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>
        <ol>
            <li>在循环体中 createElement 并 append 到父元素中。</li>
            <li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li>
        </ol>
        <p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p>
        <h4><a href="#425-dom-事件" aria-hidden="true" class="anchor" id="user-content-425-dom-事件"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4.2.5 DOM 事件</h4>
        <h5><a href="#建议-优先使用-addeventlistener--attachevent-绑定事件避免直接在-html-属性中或-dom-的-expando-属性绑定事件处理" aria-hidden="true" class="anchor" id="user-content-建议-优先使用-addeventlistener--attachevent-绑定事件避免直接在-html-属性中或-dom-的-expando-属性绑定事件处理"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5>
        <p>解释：</p>
        <p>expando 属性绑定事件容易导致互相覆盖。</p>
        <h5><a href="#建议-使用-addeventlistener-时第三个参数使用-false" aria-hidden="true" class="anchor" id="user-content-建议-使用-addeventlistener-时第三个参数使用-false"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5>
        <p>解释：</p>
        <p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p>
        <h5><a href="#建议-在没有事件自动管理的框架支持下应持有监听器函数的引用在适当时候元素释放页面卸载等移除添加的监听器" aria-hidden="true" class="anchor" id="user-content-建议-在没有事件自动管理的框架支持下应持有监听器函数的引用在适当时候元素释放页面卸载等移除添加的监听器"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>
    </article>
</div>
<!-- 公共页脚 -->
<%-include("common/footer")%>

</body>
</html>
